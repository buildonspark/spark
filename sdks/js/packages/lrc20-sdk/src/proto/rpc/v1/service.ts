// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: rpc/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "../../google/protobuf/empty.js";
import { Timestamp } from "../../google/protobuf/timestamp.js";
import {
  BlockInfo,
  FreezeTokensPayload,
  ListAllTokenTransactionsCursor,
  OperationType,
  operationTypeFromJSON,
  operationTypeToJSON,
  SparkSignatureData,
  TokenLeafOutput,
  TokenPubkeyAnnouncement,
  TokenTransaction,
  TokenTransactionResponse,
  Transaction,
} from "./types.js";

export const protobufPackage = "rpc.v1";

export interface SendSparkTxRequest {
  identityPublicKey: Uint8Array;
  finalTokenTransaction: TokenTransaction | undefined;
}

export interface SendSparkSignatureRequest {
  signatureData: SparkSignatureData | undefined;
}

export interface GetSparkTxRequest {
  finalTokenTransactionHash: Uint8Array;
}

export interface VerifySparkTxRequest {
  finalTokenTransaction: TokenTransaction | undefined;
}

export interface ListSparkTxsRequest {
  pageToken?: Uint8Array | undefined;
  pageSize?: number | undefined;
}

export interface ListWithdrawnLeavesRequest {
  blockhash?: Uint8Array | undefined;
  pageToken?: string | undefined;
  pageSize?: number | undefined;
}

export interface ListSparkTxsResponse {
  tokenTransactions: TokenTransactionResponse[];
  nextPageToken?: Uint8Array | undefined;
}

export interface ListWithdrawnLeavesResponse {
  leaves: TokenLeafOutput[];
  nextPageToken?: string | undefined;
}

export interface GetSparkTxResponse {
  finalTokenTransaction: TokenTransaction | undefined;
}

export interface FreezeTokensRequest {
  freezeTokensPayload: FreezeTokensPayload | undefined;
  issuerSignature: Uint8Array;
}

export interface FreezeTokensResponse {
  impactedLeafIds: string[];
  /** Decoded uint128 */
  impactedTokenAmount: Uint8Array[];
}

export interface ListAllTokenTransactionsRequest {
  cursor?: ListAllTokenTransactionsCursor | undefined;
  pageSize?:
    | number
    | undefined;
  /** optional filters */
  ownerPublicKey?: Uint8Array | undefined;
  tokenPublicKey?: Uint8Array | undefined;
  beforeTimestamp?: Date | undefined;
  afterTimestamp?: Date | undefined;
  operationTypes: OperationType[];
}

export interface ListAllTokenTransactionsResponse {
  transactions: Transaction[];
  nextCursor?: ListAllTokenTransactionsCursor | undefined;
}

export interface BlockInfoResponse {
  blockInfo: BlockInfo | undefined;
}

export interface SendRawTxRequest {
  tx: string;
  maxBurnAmount?: number | undefined;
}

export interface GetTokenPubkeyInfoRequest {
  publicKeys: Uint8Array[];
}

export interface GetTokenPubkeyInfoResponse {
  tokenPubkeyInfos: TokenPubkeyInfo[];
}

export interface TokenPubkeyInfo {
  announcement?: TokenPubkeyAnnouncement | undefined;
  totalSupply: Uint8Array;
  /** scriptbuf */
  owner?: Uint8Array | undefined;
  logoUrl?: string | undefined;
}

function createBaseSendSparkTxRequest(): SendSparkTxRequest {
  return { identityPublicKey: new Uint8Array(0), finalTokenTransaction: undefined };
}

export const SendSparkTxRequest: MessageFns<SendSparkTxRequest> = {
  encode(message: SendSparkTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.identityPublicKey);
    }
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendSparkTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendSparkTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendSparkTxRequest {
    return {
      identityPublicKey: isSet(object.identityPublicKey)
        ? bytesFromBase64(object.identityPublicKey)
        : new Uint8Array(0),
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
    };
  },

  toJSON(message: SendSparkTxRequest): unknown {
    const obj: any = {};
    if (message.identityPublicKey.length !== 0) {
      obj.identityPublicKey = base64FromBytes(message.identityPublicKey);
    }
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    return obj;
  },

  create(base?: DeepPartial<SendSparkTxRequest>): SendSparkTxRequest {
    return SendSparkTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendSparkTxRequest>): SendSparkTxRequest {
    const message = createBaseSendSparkTxRequest();
    message.identityPublicKey = object.identityPublicKey ?? new Uint8Array(0);
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    return message;
  },
};

function createBaseSendSparkSignatureRequest(): SendSparkSignatureRequest {
  return { signatureData: undefined };
}

export const SendSparkSignatureRequest: MessageFns<SendSparkSignatureRequest> = {
  encode(message: SendSparkSignatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signatureData !== undefined) {
      SparkSignatureData.encode(message.signatureData, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendSparkSignatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendSparkSignatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signatureData = SparkSignatureData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendSparkSignatureRequest {
    return {
      signatureData: isSet(object.signatureData) ? SparkSignatureData.fromJSON(object.signatureData) : undefined,
    };
  },

  toJSON(message: SendSparkSignatureRequest): unknown {
    const obj: any = {};
    if (message.signatureData !== undefined) {
      obj.signatureData = SparkSignatureData.toJSON(message.signatureData);
    }
    return obj;
  },

  create(base?: DeepPartial<SendSparkSignatureRequest>): SendSparkSignatureRequest {
    return SendSparkSignatureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendSparkSignatureRequest>): SendSparkSignatureRequest {
    const message = createBaseSendSparkSignatureRequest();
    message.signatureData = (object.signatureData !== undefined && object.signatureData !== null)
      ? SparkSignatureData.fromPartial(object.signatureData)
      : undefined;
    return message;
  },
};

function createBaseGetSparkTxRequest(): GetSparkTxRequest {
  return { finalTokenTransactionHash: new Uint8Array(0) };
}

export const GetSparkTxRequest: MessageFns<GetSparkTxRequest> = {
  encode(message: GetSparkTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransactionHash.length !== 0) {
      writer.uint32(10).bytes(message.finalTokenTransactionHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSparkTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSparkTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransactionHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSparkTxRequest {
    return {
      finalTokenTransactionHash: isSet(object.finalTokenTransactionHash)
        ? bytesFromBase64(object.finalTokenTransactionHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: GetSparkTxRequest): unknown {
    const obj: any = {};
    if (message.finalTokenTransactionHash.length !== 0) {
      obj.finalTokenTransactionHash = base64FromBytes(message.finalTokenTransactionHash);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSparkTxRequest>): GetSparkTxRequest {
    return GetSparkTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSparkTxRequest>): GetSparkTxRequest {
    const message = createBaseGetSparkTxRequest();
    message.finalTokenTransactionHash = object.finalTokenTransactionHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifySparkTxRequest(): VerifySparkTxRequest {
  return { finalTokenTransaction: undefined };
}

export const VerifySparkTxRequest: MessageFns<VerifySparkTxRequest> = {
  encode(message: VerifySparkTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifySparkTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifySparkTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifySparkTxRequest {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
    };
  },

  toJSON(message: VerifySparkTxRequest): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifySparkTxRequest>): VerifySparkTxRequest {
    return VerifySparkTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifySparkTxRequest>): VerifySparkTxRequest {
    const message = createBaseVerifySparkTxRequest();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    return message;
  },
};

function createBaseListSparkTxsRequest(): ListSparkTxsRequest {
  return { pageToken: undefined, pageSize: undefined };
}

export const ListSparkTxsRequest: MessageFns<ListSparkTxsRequest> = {
  encode(message: ListSparkTxsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageToken !== undefined) {
      writer.uint32(10).bytes(message.pageToken);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(16).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSparkTxsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSparkTxsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageToken = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSparkTxsRequest {
    return {
      pageToken: isSet(object.pageToken) ? bytesFromBase64(object.pageToken) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
    };
  },

  toJSON(message: ListSparkTxsRequest): unknown {
    const obj: any = {};
    if (message.pageToken !== undefined) {
      obj.pageToken = base64FromBytes(message.pageToken);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSparkTxsRequest>): ListSparkTxsRequest {
    return ListSparkTxsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSparkTxsRequest>): ListSparkTxsRequest {
    const message = createBaseListSparkTxsRequest();
    message.pageToken = object.pageToken ?? undefined;
    message.pageSize = object.pageSize ?? undefined;
    return message;
  },
};

function createBaseListWithdrawnLeavesRequest(): ListWithdrawnLeavesRequest {
  return { blockhash: undefined, pageToken: undefined, pageSize: undefined };
}

export const ListWithdrawnLeavesRequest: MessageFns<ListWithdrawnLeavesRequest> = {
  encode(message: ListWithdrawnLeavesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockhash !== undefined) {
      writer.uint32(10).bytes(message.blockhash);
    }
    if (message.pageToken !== undefined) {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(24).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWithdrawnLeavesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWithdrawnLeavesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockhash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWithdrawnLeavesRequest {
    return {
      blockhash: isSet(object.blockhash) ? bytesFromBase64(object.blockhash) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
    };
  },

  toJSON(message: ListWithdrawnLeavesRequest): unknown {
    const obj: any = {};
    if (message.blockhash !== undefined) {
      obj.blockhash = base64FromBytes(message.blockhash);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListWithdrawnLeavesRequest>): ListWithdrawnLeavesRequest {
    return ListWithdrawnLeavesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWithdrawnLeavesRequest>): ListWithdrawnLeavesRequest {
    const message = createBaseListWithdrawnLeavesRequest();
    message.blockhash = object.blockhash ?? undefined;
    message.pageToken = object.pageToken ?? undefined;
    message.pageSize = object.pageSize ?? undefined;
    return message;
  },
};

function createBaseListSparkTxsResponse(): ListSparkTxsResponse {
  return { tokenTransactions: [], nextPageToken: undefined };
}

export const ListSparkTxsResponse: MessageFns<ListSparkTxsResponse> = {
  encode(message: ListSparkTxsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenTransactions) {
      TokenTransactionResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSparkTxsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSparkTxsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenTransactions.push(TokenTransactionResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSparkTxsResponse {
    return {
      tokenTransactions: globalThis.Array.isArray(object?.tokenTransactions)
        ? object.tokenTransactions.map((e: any) => TokenTransactionResponse.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? bytesFromBase64(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: ListSparkTxsResponse): unknown {
    const obj: any = {};
    if (message.tokenTransactions?.length) {
      obj.tokenTransactions = message.tokenTransactions.map((e) => TokenTransactionResponse.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = base64FromBytes(message.nextPageToken);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSparkTxsResponse>): ListSparkTxsResponse {
    return ListSparkTxsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSparkTxsResponse>): ListSparkTxsResponse {
    const message = createBaseListSparkTxsResponse();
    message.tokenTransactions = object.tokenTransactions?.map((e) => TokenTransactionResponse.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? undefined;
    return message;
  },
};

function createBaseListWithdrawnLeavesResponse(): ListWithdrawnLeavesResponse {
  return { leaves: [], nextPageToken: undefined };
}

export const ListWithdrawnLeavesResponse: MessageFns<ListWithdrawnLeavesResponse> = {
  encode(message: ListWithdrawnLeavesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.leaves) {
      TokenLeafOutput.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWithdrawnLeavesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWithdrawnLeavesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leaves.push(TokenLeafOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWithdrawnLeavesResponse {
    return {
      leaves: globalThis.Array.isArray(object?.leaves)
        ? object.leaves.map((e: any) => TokenLeafOutput.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: ListWithdrawnLeavesResponse): unknown {
    const obj: any = {};
    if (message.leaves?.length) {
      obj.leaves = message.leaves.map((e) => TokenLeafOutput.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWithdrawnLeavesResponse>): ListWithdrawnLeavesResponse {
    return ListWithdrawnLeavesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWithdrawnLeavesResponse>): ListWithdrawnLeavesResponse {
    const message = createBaseListWithdrawnLeavesResponse();
    message.leaves = object.leaves?.map((e) => TokenLeafOutput.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? undefined;
    return message;
  },
};

function createBaseGetSparkTxResponse(): GetSparkTxResponse {
  return { finalTokenTransaction: undefined };
}

export const GetSparkTxResponse: MessageFns<GetSparkTxResponse> = {
  encode(message: GetSparkTxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSparkTxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSparkTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSparkTxResponse {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
    };
  },

  toJSON(message: GetSparkTxResponse): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSparkTxResponse>): GetSparkTxResponse {
    return GetSparkTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSparkTxResponse>): GetSparkTxResponse {
    const message = createBaseGetSparkTxResponse();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    return message;
  },
};

function createBaseFreezeTokensRequest(): FreezeTokensRequest {
  return { freezeTokensPayload: undefined, issuerSignature: new Uint8Array(0) };
}

export const FreezeTokensRequest: MessageFns<FreezeTokensRequest> = {
  encode(message: FreezeTokensRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.freezeTokensPayload !== undefined) {
      FreezeTokensPayload.encode(message.freezeTokensPayload, writer.uint32(10).fork()).join();
    }
    if (message.issuerSignature.length !== 0) {
      writer.uint32(18).bytes(message.issuerSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.freezeTokensPayload = FreezeTokensPayload.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuerSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensRequest {
    return {
      freezeTokensPayload: isSet(object.freezeTokensPayload)
        ? FreezeTokensPayload.fromJSON(object.freezeTokensPayload)
        : undefined,
      issuerSignature: isSet(object.issuerSignature) ? bytesFromBase64(object.issuerSignature) : new Uint8Array(0),
    };
  },

  toJSON(message: FreezeTokensRequest): unknown {
    const obj: any = {};
    if (message.freezeTokensPayload !== undefined) {
      obj.freezeTokensPayload = FreezeTokensPayload.toJSON(message.freezeTokensPayload);
    }
    if (message.issuerSignature.length !== 0) {
      obj.issuerSignature = base64FromBytes(message.issuerSignature);
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensRequest>): FreezeTokensRequest {
    return FreezeTokensRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensRequest>): FreezeTokensRequest {
    const message = createBaseFreezeTokensRequest();
    message.freezeTokensPayload = (object.freezeTokensPayload !== undefined && object.freezeTokensPayload !== null)
      ? FreezeTokensPayload.fromPartial(object.freezeTokensPayload)
      : undefined;
    message.issuerSignature = object.issuerSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFreezeTokensResponse(): FreezeTokensResponse {
  return { impactedLeafIds: [], impactedTokenAmount: [] };
}

export const FreezeTokensResponse: MessageFns<FreezeTokensResponse> = {
  encode(message: FreezeTokensResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.impactedLeafIds) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.impactedTokenAmount) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.impactedLeafIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.impactedTokenAmount.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensResponse {
    return {
      impactedLeafIds: globalThis.Array.isArray(object?.impactedLeafIds)
        ? object.impactedLeafIds.map((e: any) => globalThis.String(e))
        : [],
      impactedTokenAmount: globalThis.Array.isArray(object?.impactedTokenAmount)
        ? object.impactedTokenAmount.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: FreezeTokensResponse): unknown {
    const obj: any = {};
    if (message.impactedLeafIds?.length) {
      obj.impactedLeafIds = message.impactedLeafIds;
    }
    if (message.impactedTokenAmount?.length) {
      obj.impactedTokenAmount = message.impactedTokenAmount.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensResponse>): FreezeTokensResponse {
    return FreezeTokensResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensResponse>): FreezeTokensResponse {
    const message = createBaseFreezeTokensResponse();
    message.impactedLeafIds = object.impactedLeafIds?.map((e) => e) || [];
    message.impactedTokenAmount = object.impactedTokenAmount?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAllTokenTransactionsRequest(): ListAllTokenTransactionsRequest {
  return {
    cursor: undefined,
    pageSize: undefined,
    ownerPublicKey: undefined,
    tokenPublicKey: undefined,
    beforeTimestamp: undefined,
    afterTimestamp: undefined,
    operationTypes: [],
  };
}

export const ListAllTokenTransactionsRequest: MessageFns<ListAllTokenTransactionsRequest> = {
  encode(message: ListAllTokenTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== undefined) {
      ListAllTokenTransactionsCursor.encode(message.cursor, writer.uint32(10).fork()).join();
    }
    if (message.pageSize !== undefined) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.ownerPublicKey !== undefined) {
      writer.uint32(26).bytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(34).bytes(message.tokenPublicKey);
    }
    if (message.beforeTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.beforeTimestamp), writer.uint32(42).fork()).join();
    }
    if (message.afterTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.afterTimestamp), writer.uint32(50).fork()).join();
    }
    writer.uint32(58).fork();
    for (const v of message.operationTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = ListAllTokenTransactionsCursor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.beforeTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.afterTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.operationTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.operationTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsRequest {
    return {
      cursor: isSet(object.cursor) ? ListAllTokenTransactionsCursor.fromJSON(object.cursor) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : undefined,
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : undefined,
      beforeTimestamp: isSet(object.beforeTimestamp) ? fromJsonTimestamp(object.beforeTimestamp) : undefined,
      afterTimestamp: isSet(object.afterTimestamp) ? fromJsonTimestamp(object.afterTimestamp) : undefined,
      operationTypes: globalThis.Array.isArray(object?.operationTypes)
        ? object.operationTypes.map((e: any) => operationTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAllTokenTransactionsRequest): unknown {
    const obj: any = {};
    if (message.cursor !== undefined) {
      obj.cursor = ListAllTokenTransactionsCursor.toJSON(message.cursor);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.ownerPublicKey !== undefined) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.beforeTimestamp !== undefined) {
      obj.beforeTimestamp = message.beforeTimestamp.toISOString();
    }
    if (message.afterTimestamp !== undefined) {
      obj.afterTimestamp = message.afterTimestamp.toISOString();
    }
    if (message.operationTypes?.length) {
      obj.operationTypes = message.operationTypes.map((e) => operationTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsRequest>): ListAllTokenTransactionsRequest {
    return ListAllTokenTransactionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsRequest>): ListAllTokenTransactionsRequest {
    const message = createBaseListAllTokenTransactionsRequest();
    message.cursor = (object.cursor !== undefined && object.cursor !== null)
      ? ListAllTokenTransactionsCursor.fromPartial(object.cursor)
      : undefined;
    message.pageSize = object.pageSize ?? undefined;
    message.ownerPublicKey = object.ownerPublicKey ?? undefined;
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.beforeTimestamp = object.beforeTimestamp ?? undefined;
    message.afterTimestamp = object.afterTimestamp ?? undefined;
    message.operationTypes = object.operationTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAllTokenTransactionsResponse(): ListAllTokenTransactionsResponse {
  return { transactions: [], nextCursor: undefined };
}

export const ListAllTokenTransactionsResponse: MessageFns<ListAllTokenTransactionsResponse> = {
  encode(message: ListAllTokenTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transactions) {
      Transaction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextCursor !== undefined) {
      ListAllTokenTransactionsCursor.encode(message.nextCursor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactions.push(Transaction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextCursor = ListAllTokenTransactionsCursor.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsResponse {
    return {
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => Transaction.fromJSON(e))
        : [],
      nextCursor: isSet(object.nextCursor) ? ListAllTokenTransactionsCursor.fromJSON(object.nextCursor) : undefined,
    };
  },

  toJSON(message: ListAllTokenTransactionsResponse): unknown {
    const obj: any = {};
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => Transaction.toJSON(e));
    }
    if (message.nextCursor !== undefined) {
      obj.nextCursor = ListAllTokenTransactionsCursor.toJSON(message.nextCursor);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsResponse>): ListAllTokenTransactionsResponse {
    return ListAllTokenTransactionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsResponse>): ListAllTokenTransactionsResponse {
    const message = createBaseListAllTokenTransactionsResponse();
    message.transactions = object.transactions?.map((e) => Transaction.fromPartial(e)) || [];
    message.nextCursor = (object.nextCursor !== undefined && object.nextCursor !== null)
      ? ListAllTokenTransactionsCursor.fromPartial(object.nextCursor)
      : undefined;
    return message;
  },
};

function createBaseBlockInfoResponse(): BlockInfoResponse {
  return { blockInfo: undefined };
}

export const BlockInfoResponse: MessageFns<BlockInfoResponse> = {
  encode(message: BlockInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockInfo !== undefined) {
      BlockInfo.encode(message.blockInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockInfo = BlockInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockInfoResponse {
    return { blockInfo: isSet(object.blockInfo) ? BlockInfo.fromJSON(object.blockInfo) : undefined };
  },

  toJSON(message: BlockInfoResponse): unknown {
    const obj: any = {};
    if (message.blockInfo !== undefined) {
      obj.blockInfo = BlockInfo.toJSON(message.blockInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<BlockInfoResponse>): BlockInfoResponse {
    return BlockInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlockInfoResponse>): BlockInfoResponse {
    const message = createBaseBlockInfoResponse();
    message.blockInfo = (object.blockInfo !== undefined && object.blockInfo !== null)
      ? BlockInfo.fromPartial(object.blockInfo)
      : undefined;
    return message;
  },
};

function createBaseSendRawTxRequest(): SendRawTxRequest {
  return { tx: "", maxBurnAmount: undefined };
}

export const SendRawTxRequest: MessageFns<SendRawTxRequest> = {
  encode(message: SendRawTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tx !== "") {
      writer.uint32(10).string(message.tx);
    }
    if (message.maxBurnAmount !== undefined) {
      writer.uint32(16).uint64(message.maxBurnAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendRawTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendRawTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tx = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxBurnAmount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendRawTxRequest {
    return {
      tx: isSet(object.tx) ? globalThis.String(object.tx) : "",
      maxBurnAmount: isSet(object.maxBurnAmount) ? globalThis.Number(object.maxBurnAmount) : undefined,
    };
  },

  toJSON(message: SendRawTxRequest): unknown {
    const obj: any = {};
    if (message.tx !== "") {
      obj.tx = message.tx;
    }
    if (message.maxBurnAmount !== undefined) {
      obj.maxBurnAmount = Math.round(message.maxBurnAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<SendRawTxRequest>): SendRawTxRequest {
    return SendRawTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendRawTxRequest>): SendRawTxRequest {
    const message = createBaseSendRawTxRequest();
    message.tx = object.tx ?? "";
    message.maxBurnAmount = object.maxBurnAmount ?? undefined;
    return message;
  },
};

function createBaseGetTokenPubkeyInfoRequest(): GetTokenPubkeyInfoRequest {
  return { publicKeys: [] };
}

export const GetTokenPubkeyInfoRequest: MessageFns<GetTokenPubkeyInfoRequest> = {
  encode(message: GetTokenPubkeyInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.publicKeys) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenPubkeyInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenPubkeyInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKeys.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenPubkeyInfoRequest {
    return {
      publicKeys: globalThis.Array.isArray(object?.publicKeys)
        ? object.publicKeys.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: GetTokenPubkeyInfoRequest): unknown {
    const obj: any = {};
    if (message.publicKeys?.length) {
      obj.publicKeys = message.publicKeys.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetTokenPubkeyInfoRequest>): GetTokenPubkeyInfoRequest {
    return GetTokenPubkeyInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTokenPubkeyInfoRequest>): GetTokenPubkeyInfoRequest {
    const message = createBaseGetTokenPubkeyInfoRequest();
    message.publicKeys = object.publicKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetTokenPubkeyInfoResponse(): GetTokenPubkeyInfoResponse {
  return { tokenPubkeyInfos: [] };
}

export const GetTokenPubkeyInfoResponse: MessageFns<GetTokenPubkeyInfoResponse> = {
  encode(message: GetTokenPubkeyInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenPubkeyInfos) {
      TokenPubkeyInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenPubkeyInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenPubkeyInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenPubkeyInfos.push(TokenPubkeyInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenPubkeyInfoResponse {
    return {
      tokenPubkeyInfos: globalThis.Array.isArray(object?.tokenPubkeyInfos)
        ? object.tokenPubkeyInfos.map((e: any) => TokenPubkeyInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetTokenPubkeyInfoResponse): unknown {
    const obj: any = {};
    if (message.tokenPubkeyInfos?.length) {
      obj.tokenPubkeyInfos = message.tokenPubkeyInfos.map((e) => TokenPubkeyInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetTokenPubkeyInfoResponse>): GetTokenPubkeyInfoResponse {
    return GetTokenPubkeyInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTokenPubkeyInfoResponse>): GetTokenPubkeyInfoResponse {
    const message = createBaseGetTokenPubkeyInfoResponse();
    message.tokenPubkeyInfos = object.tokenPubkeyInfos?.map((e) => TokenPubkeyInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTokenPubkeyInfo(): TokenPubkeyInfo {
  return { announcement: undefined, totalSupply: new Uint8Array(0), owner: undefined, logoUrl: undefined };
}

export const TokenPubkeyInfo: MessageFns<TokenPubkeyInfo> = {
  encode(message: TokenPubkeyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.announcement !== undefined) {
      TokenPubkeyAnnouncement.encode(message.announcement, writer.uint32(10).fork()).join();
    }
    if (message.totalSupply.length !== 0) {
      writer.uint32(18).bytes(message.totalSupply);
    }
    if (message.owner !== undefined) {
      writer.uint32(26).bytes(message.owner);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(34).string(message.logoUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenPubkeyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenPubkeyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.announcement = TokenPubkeyAnnouncement.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.totalSupply = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenPubkeyInfo {
    return {
      announcement: isSet(object.announcement) ? TokenPubkeyAnnouncement.fromJSON(object.announcement) : undefined,
      totalSupply: isSet(object.totalSupply) ? bytesFromBase64(object.totalSupply) : new Uint8Array(0),
      owner: isSet(object.owner) ? bytesFromBase64(object.owner) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
    };
  },

  toJSON(message: TokenPubkeyInfo): unknown {
    const obj: any = {};
    if (message.announcement !== undefined) {
      obj.announcement = TokenPubkeyAnnouncement.toJSON(message.announcement);
    }
    if (message.totalSupply.length !== 0) {
      obj.totalSupply = base64FromBytes(message.totalSupply);
    }
    if (message.owner !== undefined) {
      obj.owner = base64FromBytes(message.owner);
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenPubkeyInfo>): TokenPubkeyInfo {
    return TokenPubkeyInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenPubkeyInfo>): TokenPubkeyInfo {
    const message = createBaseTokenPubkeyInfo();
    message.announcement = (object.announcement !== undefined && object.announcement !== null)
      ? TokenPubkeyAnnouncement.fromPartial(object.announcement)
      : undefined;
    message.totalSupply = object.totalSupply ?? new Uint8Array(0);
    message.owner = object.owner ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    return message;
  },
};

export type SparkServiceDefinition = typeof SparkServiceDefinition;
export const SparkServiceDefinition = {
  name: "SparkService",
  fullName: "rpc.v1.SparkService",
  methods: {
    sendSparkTx: {
      name: "SendSparkTx",
      requestType: SendSparkTxRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    sendSparkSignature: {
      name: "SendSparkSignature",
      requestType: SendSparkSignatureRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    listSparkTxs: {
      name: "ListSparkTxs",
      requestType: ListSparkTxsRequest,
      requestStream: false,
      responseType: ListSparkTxsResponse,
      responseStream: false,
      options: {},
    },
    listTransactions: {
      name: "ListTransactions",
      requestType: ListAllTokenTransactionsRequest,
      requestStream: false,
      responseType: ListAllTokenTransactionsResponse,
      responseStream: false,
      options: {},
    },
    listWithdrawnLeaves: {
      name: "ListWithdrawnLeaves",
      requestType: ListWithdrawnLeavesRequest,
      requestStream: false,
      responseType: ListWithdrawnLeavesResponse,
      responseStream: false,
      options: {},
    },
    getSparkTx: {
      name: "GetSparkTx",
      requestType: GetSparkTxRequest,
      requestStream: false,
      responseType: GetSparkTxResponse,
      responseStream: false,
      options: {},
    },
    verifySparkTx: {
      name: "VerifySparkTx",
      requestType: VerifySparkTxRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    freezeTokens: {
      name: "FreezeTokens",
      requestType: FreezeTokensRequest,
      requestStream: false,
      responseType: FreezeTokensResponse,
      responseStream: false,
      options: {},
    },
    getLastIndexedBlockInfo: {
      name: "GetLastIndexedBlockInfo",
      requestType: Empty,
      requestStream: false,
      responseType: BlockInfoResponse,
      responseStream: false,
      options: {},
    },
    sendRawLrcTransaction: {
      name: "SendRawLrcTransaction",
      requestType: SendRawTxRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    getTokenPubkeyInfo: {
      name: "GetTokenPubkeyInfo",
      requestType: GetTokenPubkeyInfoRequest,
      requestStream: false,
      responseType: GetTokenPubkeyInfoResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SparkServiceImplementation<CallContextExt = {}> {
  sendSparkTx(request: SendSparkTxRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  sendSparkSignature(
    request: SendSparkSignatureRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  listSparkTxs(
    request: ListSparkTxsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSparkTxsResponse>>;
  listTransactions(
    request: ListAllTokenTransactionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAllTokenTransactionsResponse>>;
  listWithdrawnLeaves(
    request: ListWithdrawnLeavesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWithdrawnLeavesResponse>>;
  getSparkTx(
    request: GetSparkTxRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSparkTxResponse>>;
  verifySparkTx(request: VerifySparkTxRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  freezeTokens(
    request: FreezeTokensRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FreezeTokensResponse>>;
  getLastIndexedBlockInfo(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BlockInfoResponse>>;
  sendRawLrcTransaction(request: SendRawTxRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  getTokenPubkeyInfo(
    request: GetTokenPubkeyInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetTokenPubkeyInfoResponse>>;
}

export interface SparkServiceClient<CallOptionsExt = {}> {
  sendSparkTx(request: DeepPartial<SendSparkTxRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  sendSparkSignature(
    request: DeepPartial<SendSparkSignatureRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  listSparkTxs(
    request: DeepPartial<ListSparkTxsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSparkTxsResponse>;
  listTransactions(
    request: DeepPartial<ListAllTokenTransactionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAllTokenTransactionsResponse>;
  listWithdrawnLeaves(
    request: DeepPartial<ListWithdrawnLeavesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWithdrawnLeavesResponse>;
  getSparkTx(
    request: DeepPartial<GetSparkTxRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSparkTxResponse>;
  verifySparkTx(request: DeepPartial<VerifySparkTxRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  freezeTokens(
    request: DeepPartial<FreezeTokensRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FreezeTokensResponse>;
  getLastIndexedBlockInfo(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BlockInfoResponse>;
  sendRawLrcTransaction(request: DeepPartial<SendRawTxRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  getTokenPubkeyInfo(
    request: DeepPartial<GetTokenPubkeyInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetTokenPubkeyInfoResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
