// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: mock.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty.js";

export const protobufPackage = "mock";

export interface CleanUpPreimageShareRequest {
  paymentHash: Uint8Array;
}

function createBaseCleanUpPreimageShareRequest(): CleanUpPreimageShareRequest {
  return { paymentHash: new Uint8Array(0) };
}

export const CleanUpPreimageShareRequest: MessageFns<CleanUpPreimageShareRequest> = {
  encode(message: CleanUpPreimageShareRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentHash.length !== 0) {
      writer.uint32(10).bytes(message.paymentHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CleanUpPreimageShareRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCleanUpPreimageShareRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CleanUpPreimageShareRequest {
    return { paymentHash: isSet(object.paymentHash) ? bytesFromBase64(object.paymentHash) : new Uint8Array(0) };
  },

  toJSON(message: CleanUpPreimageShareRequest): unknown {
    const obj: any = {};
    if (message.paymentHash.length !== 0) {
      obj.paymentHash = base64FromBytes(message.paymentHash);
    }
    return obj;
  },

  create(base?: DeepPartial<CleanUpPreimageShareRequest>): CleanUpPreimageShareRequest {
    return CleanUpPreimageShareRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CleanUpPreimageShareRequest>): CleanUpPreimageShareRequest {
    const message = createBaseCleanUpPreimageShareRequest();
    message.paymentHash = object.paymentHash ?? new Uint8Array(0);
    return message;
  },
};

export type MockServiceDefinition = typeof MockServiceDefinition;
export const MockServiceDefinition = {
  name: "MockService",
  fullName: "mock.MockService",
  methods: {
    clean_up_preimage_share: {
      name: "clean_up_preimage_share",
      requestType: CleanUpPreimageShareRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MockServiceImplementation<CallContextExt = {}> {
  clean_up_preimage_share(
    request: CleanUpPreimageShareRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface MockServiceClient<CallOptionsExt = {}> {
  clean_up_preimage_share(
    request: DeepPartial<CleanUpPreimageShareRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
