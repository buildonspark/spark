// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/transfer"
	"github.com/lightsparkdev/spark-go/so/ent/transferleaf"
	"github.com/lightsparkdev/spark-go/so/ent/treenode"
)

// TransferLeafCreate is the builder for creating a TransferLeaf entity.
type TransferLeafCreate struct {
	config
	mutation *TransferLeafMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tlc *TransferLeafCreate) SetCreateTime(t time.Time) *TransferLeafCreate {
	tlc.mutation.SetCreateTime(t)
	return tlc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tlc *TransferLeafCreate) SetNillableCreateTime(t *time.Time) *TransferLeafCreate {
	if t != nil {
		tlc.SetCreateTime(*t)
	}
	return tlc
}

// SetUpdateTime sets the "update_time" field.
func (tlc *TransferLeafCreate) SetUpdateTime(t time.Time) *TransferLeafCreate {
	tlc.mutation.SetUpdateTime(t)
	return tlc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tlc *TransferLeafCreate) SetNillableUpdateTime(t *time.Time) *TransferLeafCreate {
	if t != nil {
		tlc.SetUpdateTime(*t)
	}
	return tlc
}

// SetSecretCipher sets the "secret_cipher" field.
func (tlc *TransferLeafCreate) SetSecretCipher(b []byte) *TransferLeafCreate {
	tlc.mutation.SetSecretCipher(b)
	return tlc
}

// SetSignature sets the "signature" field.
func (tlc *TransferLeafCreate) SetSignature(b []byte) *TransferLeafCreate {
	tlc.mutation.SetSignature(b)
	return tlc
}

// SetPreviousRefundTx sets the "previous_refund_tx" field.
func (tlc *TransferLeafCreate) SetPreviousRefundTx(b []byte) *TransferLeafCreate {
	tlc.mutation.SetPreviousRefundTx(b)
	return tlc
}

// SetIntermediateRefundTx sets the "intermediate_refund_tx" field.
func (tlc *TransferLeafCreate) SetIntermediateRefundTx(b []byte) *TransferLeafCreate {
	tlc.mutation.SetIntermediateRefundTx(b)
	return tlc
}

// SetKeyTweak sets the "key_tweak" field.
func (tlc *TransferLeafCreate) SetKeyTweak(b []byte) *TransferLeafCreate {
	tlc.mutation.SetKeyTweak(b)
	return tlc
}

// SetSenderKeyTweakProof sets the "sender_key_tweak_proof" field.
func (tlc *TransferLeafCreate) SetSenderKeyTweakProof(b []byte) *TransferLeafCreate {
	tlc.mutation.SetSenderKeyTweakProof(b)
	return tlc
}

// SetReceiverKeyTweak sets the "receiver_key_tweak" field.
func (tlc *TransferLeafCreate) SetReceiverKeyTweak(b []byte) *TransferLeafCreate {
	tlc.mutation.SetReceiverKeyTweak(b)
	return tlc
}

// SetID sets the "id" field.
func (tlc *TransferLeafCreate) SetID(u uuid.UUID) *TransferLeafCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TransferLeafCreate) SetNillableID(u *uuid.UUID) *TransferLeafCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// SetTransferID sets the "transfer" edge to the Transfer entity by ID.
func (tlc *TransferLeafCreate) SetTransferID(id uuid.UUID) *TransferLeafCreate {
	tlc.mutation.SetTransferID(id)
	return tlc
}

// SetTransfer sets the "transfer" edge to the Transfer entity.
func (tlc *TransferLeafCreate) SetTransfer(t *Transfer) *TransferLeafCreate {
	return tlc.SetTransferID(t.ID)
}

// SetLeafID sets the "leaf" edge to the TreeNode entity by ID.
func (tlc *TransferLeafCreate) SetLeafID(id uuid.UUID) *TransferLeafCreate {
	tlc.mutation.SetLeafID(id)
	return tlc
}

// SetLeaf sets the "leaf" edge to the TreeNode entity.
func (tlc *TransferLeafCreate) SetLeaf(t *TreeNode) *TransferLeafCreate {
	return tlc.SetLeafID(t.ID)
}

// Mutation returns the TransferLeafMutation object of the builder.
func (tlc *TransferLeafCreate) Mutation() *TransferLeafMutation {
	return tlc.mutation
}

// Save creates the TransferLeaf in the database.
func (tlc *TransferLeafCreate) Save(ctx context.Context) (*TransferLeaf, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TransferLeafCreate) SaveX(ctx context.Context) *TransferLeaf {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TransferLeafCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TransferLeafCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TransferLeafCreate) defaults() {
	if _, ok := tlc.mutation.CreateTime(); !ok {
		v := transferleaf.DefaultCreateTime()
		tlc.mutation.SetCreateTime(v)
	}
	if _, ok := tlc.mutation.UpdateTime(); !ok {
		v := transferleaf.DefaultUpdateTime()
		tlc.mutation.SetUpdateTime(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := transferleaf.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TransferLeafCreate) check() error {
	if _, ok := tlc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TransferLeaf.create_time"`)}
	}
	if _, ok := tlc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TransferLeaf.update_time"`)}
	}
	if _, ok := tlc.mutation.PreviousRefundTx(); !ok {
		return &ValidationError{Name: "previous_refund_tx", err: errors.New(`ent: missing required field "TransferLeaf.previous_refund_tx"`)}
	}
	if v, ok := tlc.mutation.PreviousRefundTx(); ok {
		if err := transferleaf.PreviousRefundTxValidator(v); err != nil {
			return &ValidationError{Name: "previous_refund_tx", err: fmt.Errorf(`ent: validator failed for field "TransferLeaf.previous_refund_tx": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.IntermediateRefundTx(); !ok {
		return &ValidationError{Name: "intermediate_refund_tx", err: errors.New(`ent: missing required field "TransferLeaf.intermediate_refund_tx"`)}
	}
	if v, ok := tlc.mutation.IntermediateRefundTx(); ok {
		if err := transferleaf.IntermediateRefundTxValidator(v); err != nil {
			return &ValidationError{Name: "intermediate_refund_tx", err: fmt.Errorf(`ent: validator failed for field "TransferLeaf.intermediate_refund_tx": %w`, err)}
		}
	}
	if len(tlc.mutation.TransferIDs()) == 0 {
		return &ValidationError{Name: "transfer", err: errors.New(`ent: missing required edge "TransferLeaf.transfer"`)}
	}
	if len(tlc.mutation.LeafIDs()) == 0 {
		return &ValidationError{Name: "leaf", err: errors.New(`ent: missing required edge "TransferLeaf.leaf"`)}
	}
	return nil
}

func (tlc *TransferLeafCreate) sqlSave(ctx context.Context) (*TransferLeaf, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TransferLeafCreate) createSpec() (*TransferLeaf, *sqlgraph.CreateSpec) {
	var (
		_node = &TransferLeaf{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(transferleaf.Table, sqlgraph.NewFieldSpec(transferleaf.FieldID, field.TypeUUID))
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.CreateTime(); ok {
		_spec.SetField(transferleaf.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tlc.mutation.UpdateTime(); ok {
		_spec.SetField(transferleaf.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tlc.mutation.SecretCipher(); ok {
		_spec.SetField(transferleaf.FieldSecretCipher, field.TypeBytes, value)
		_node.SecretCipher = value
	}
	if value, ok := tlc.mutation.Signature(); ok {
		_spec.SetField(transferleaf.FieldSignature, field.TypeBytes, value)
		_node.Signature = value
	}
	if value, ok := tlc.mutation.PreviousRefundTx(); ok {
		_spec.SetField(transferleaf.FieldPreviousRefundTx, field.TypeBytes, value)
		_node.PreviousRefundTx = value
	}
	if value, ok := tlc.mutation.IntermediateRefundTx(); ok {
		_spec.SetField(transferleaf.FieldIntermediateRefundTx, field.TypeBytes, value)
		_node.IntermediateRefundTx = value
	}
	if value, ok := tlc.mutation.KeyTweak(); ok {
		_spec.SetField(transferleaf.FieldKeyTweak, field.TypeBytes, value)
		_node.KeyTweak = value
	}
	if value, ok := tlc.mutation.SenderKeyTweakProof(); ok {
		_spec.SetField(transferleaf.FieldSenderKeyTweakProof, field.TypeBytes, value)
		_node.SenderKeyTweakProof = value
	}
	if value, ok := tlc.mutation.ReceiverKeyTweak(); ok {
		_spec.SetField(transferleaf.FieldReceiverKeyTweak, field.TypeBytes, value)
		_node.ReceiverKeyTweak = value
	}
	if nodes := tlc.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transferleaf.TransferTable,
			Columns: []string{transferleaf.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transfer_leaf_transfer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.LeafIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transferleaf.LeafTable,
			Columns: []string{transferleaf.LeafColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(treenode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transfer_leaf_leaf = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransferLeafCreateBulk is the builder for creating many TransferLeaf entities in bulk.
type TransferLeafCreateBulk struct {
	config
	err      error
	builders []*TransferLeafCreate
}

// Save creates the TransferLeaf entities in the database.
func (tlcb *TransferLeafCreateBulk) Save(ctx context.Context) ([]*TransferLeaf, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TransferLeaf, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferLeafMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TransferLeafCreateBulk) SaveX(ctx context.Context) []*TransferLeaf {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TransferLeafCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TransferLeafCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
