// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: lrc20.proto

package lrc20

import (
	context "context"
	spark "github.com/lightsparkdev/spark-go/proto/spark"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkService_SendSparkTx_FullMethodName         = "/rpc.v1.SparkService/SendSparkTx"
	SparkService_SendSparkSignature_FullMethodName  = "/rpc.v1.SparkService/SendSparkSignature"
	SparkService_ListSparkTxs_FullMethodName        = "/rpc.v1.SparkService/ListSparkTxs"
	SparkService_GetSparkTx_FullMethodName          = "/rpc.v1.SparkService/GetSparkTx"
	SparkService_VerifySparkTx_FullMethodName       = "/rpc.v1.SparkService/VerifySparkTx"
	SparkService_FreezeTokens_FullMethodName        = "/rpc.v1.SparkService/FreezeTokens"
	SparkService_ListWithdrawnLeaves_FullMethodName = "/rpc.v1.SparkService/ListWithdrawnLeaves"
)

// SparkServiceClient is the client API for SparkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkServiceClient interface {
	SendSparkTx(ctx context.Context, in *SendSparkTxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendSparkSignature(ctx context.Context, in *SendSparkSignatureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSparkTxs(ctx context.Context, in *ListSparkTxsRequest, opts ...grpc.CallOption) (*ListSparkTxsResponse, error)
	GetSparkTx(ctx context.Context, in *GetSparkTxRequest, opts ...grpc.CallOption) (*GetSparkTxResponse, error)
	VerifySparkTx(ctx context.Context, in *VerifySparkTxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FreezeTokens(ctx context.Context, in *spark.FreezeTokensRequest, opts ...grpc.CallOption) (*spark.FreezeTokensResponse, error)
	ListWithdrawnLeaves(ctx context.Context, in *ListWithdrawnLeavesRequest, opts ...grpc.CallOption) (*ListWithdrawnLeavesResponse, error)
}

type sparkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkServiceClient(cc grpc.ClientConnInterface) SparkServiceClient {
	return &sparkServiceClient{cc}
}

func (c *sparkServiceClient) SendSparkTx(ctx context.Context, in *SendSparkTxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_SendSparkTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) SendSparkSignature(ctx context.Context, in *SendSparkSignatureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_SendSparkSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ListSparkTxs(ctx context.Context, in *ListSparkTxsRequest, opts ...grpc.CallOption) (*ListSparkTxsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSparkTxsResponse)
	err := c.cc.Invoke(ctx, SparkService_ListSparkTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) GetSparkTx(ctx context.Context, in *GetSparkTxRequest, opts ...grpc.CallOption) (*GetSparkTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSparkTxResponse)
	err := c.cc.Invoke(ctx, SparkService_GetSparkTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) VerifySparkTx(ctx context.Context, in *VerifySparkTxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_VerifySparkTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FreezeTokens(ctx context.Context, in *spark.FreezeTokensRequest, opts ...grpc.CallOption) (*spark.FreezeTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(spark.FreezeTokensResponse)
	err := c.cc.Invoke(ctx, SparkService_FreezeTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ListWithdrawnLeaves(ctx context.Context, in *ListWithdrawnLeavesRequest, opts ...grpc.CallOption) (*ListWithdrawnLeavesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawnLeavesResponse)
	err := c.cc.Invoke(ctx, SparkService_ListWithdrawnLeaves_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkServiceServer is the server API for SparkService service.
// All implementations must embed UnimplementedSparkServiceServer
// for forward compatibility.
type SparkServiceServer interface {
	SendSparkTx(context.Context, *SendSparkTxRequest) (*emptypb.Empty, error)
	SendSparkSignature(context.Context, *SendSparkSignatureRequest) (*emptypb.Empty, error)
	ListSparkTxs(context.Context, *ListSparkTxsRequest) (*ListSparkTxsResponse, error)
	GetSparkTx(context.Context, *GetSparkTxRequest) (*GetSparkTxResponse, error)
	VerifySparkTx(context.Context, *VerifySparkTxRequest) (*emptypb.Empty, error)
	FreezeTokens(context.Context, *spark.FreezeTokensRequest) (*spark.FreezeTokensResponse, error)
	ListWithdrawnLeaves(context.Context, *ListWithdrawnLeavesRequest) (*ListWithdrawnLeavesResponse, error)
	mustEmbedUnimplementedSparkServiceServer()
}

// UnimplementedSparkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkServiceServer struct{}

func (UnimplementedSparkServiceServer) SendSparkTx(context.Context, *SendSparkTxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSparkTx not implemented")
}
func (UnimplementedSparkServiceServer) SendSparkSignature(context.Context, *SendSparkSignatureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSparkSignature not implemented")
}
func (UnimplementedSparkServiceServer) ListSparkTxs(context.Context, *ListSparkTxsRequest) (*ListSparkTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSparkTxs not implemented")
}
func (UnimplementedSparkServiceServer) GetSparkTx(context.Context, *GetSparkTxRequest) (*GetSparkTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSparkTx not implemented")
}
func (UnimplementedSparkServiceServer) VerifySparkTx(context.Context, *VerifySparkTxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySparkTx not implemented")
}
func (UnimplementedSparkServiceServer) FreezeTokens(context.Context, *spark.FreezeTokensRequest) (*spark.FreezeTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeTokens not implemented")
}
func (UnimplementedSparkServiceServer) ListWithdrawnLeaves(context.Context, *ListWithdrawnLeavesRequest) (*ListWithdrawnLeavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawnLeaves not implemented")
}
func (UnimplementedSparkServiceServer) mustEmbedUnimplementedSparkServiceServer() {}
func (UnimplementedSparkServiceServer) testEmbeddedByValue()                      {}

// UnsafeSparkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkServiceServer will
// result in compilation errors.
type UnsafeSparkServiceServer interface {
	mustEmbedUnimplementedSparkServiceServer()
}

func RegisterSparkServiceServer(s grpc.ServiceRegistrar, srv SparkServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkService_ServiceDesc, srv)
}

func _SparkService_SendSparkTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSparkTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).SendSparkTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_SendSparkTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).SendSparkTx(ctx, req.(*SendSparkTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_SendSparkSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSparkSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).SendSparkSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_SendSparkSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).SendSparkSignature(ctx, req.(*SendSparkSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ListSparkTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSparkTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ListSparkTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ListSparkTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ListSparkTxs(ctx, req.(*ListSparkTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_GetSparkTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSparkTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GetSparkTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_GetSparkTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GetSparkTx(ctx, req.(*GetSparkTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_VerifySparkTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySparkTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).VerifySparkTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_VerifySparkTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).VerifySparkTx(ctx, req.(*VerifySparkTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FreezeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spark.FreezeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FreezeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FreezeTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FreezeTokens(ctx, req.(*spark.FreezeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ListWithdrawnLeaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawnLeavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ListWithdrawnLeaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ListWithdrawnLeaves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ListWithdrawnLeaves(ctx, req.(*ListWithdrawnLeavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkService_ServiceDesc is the grpc.ServiceDesc for SparkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.v1.SparkService",
	HandlerType: (*SparkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSparkTx",
			Handler:    _SparkService_SendSparkTx_Handler,
		},
		{
			MethodName: "SendSparkSignature",
			Handler:    _SparkService_SendSparkSignature_Handler,
		},
		{
			MethodName: "ListSparkTxs",
			Handler:    _SparkService_ListSparkTxs_Handler,
		},
		{
			MethodName: "GetSparkTx",
			Handler:    _SparkService_GetSparkTx_Handler,
		},
		{
			MethodName: "VerifySparkTx",
			Handler:    _SparkService_VerifySparkTx_Handler,
		},
		{
			MethodName: "FreezeTokens",
			Handler:    _SparkService_FreezeTokens_Handler,
		},
		{
			MethodName: "ListWithdrawnLeaves",
			Handler:    _SparkService_ListWithdrawnLeaves_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lrc20.proto",
}
