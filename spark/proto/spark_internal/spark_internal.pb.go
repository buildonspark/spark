// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: spark_internal.proto

package spark_internal

import (
	common "github.com/lightsparkdev/spark-go/proto/common"
	spark "github.com/lightsparkdev/spark-go/proto/spark"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkKeysharesAsUsedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyshareId    []string               `protobuf:"bytes,1,rep,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkKeysharesAsUsedRequest) Reset() {
	*x = MarkKeysharesAsUsedRequest{}
	mi := &file_spark_internal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeysharesAsUsedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeysharesAsUsedRequest) ProtoMessage() {}

func (x *MarkKeysharesAsUsedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeysharesAsUsedRequest.ProtoReflect.Descriptor instead.
func (*MarkKeysharesAsUsedRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{0}
}

func (x *MarkKeysharesAsUsedRequest) GetKeyshareId() []string {
	if x != nil {
		return x.KeyshareId
	}
	return nil
}

type MarkKeyshareForDepositAddressRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	KeyshareId             string                 `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	Address                string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	OwnerIdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	OwnerSigningPublicKey  []byte                 `protobuf:"bytes,4,opt,name=owner_signing_public_key,json=ownerSigningPublicKey,proto3" json:"owner_signing_public_key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MarkKeyshareForDepositAddressRequest) Reset() {
	*x = MarkKeyshareForDepositAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressRequest) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressRequest.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{1}
}

func (x *MarkKeyshareForDepositAddressRequest) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

func (x *MarkKeyshareForDepositAddressRequest) GetOwnerSigningPublicKey() []byte {
	if x != nil {
		return x.OwnerSigningPublicKey
	}
	return nil
}

type MarkKeyshareForDepositAddressResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AddressSignature []byte                 `protobuf:"bytes,1,opt,name=address_signature,json=addressSignature,proto3" json:"address_signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MarkKeyshareForDepositAddressResponse) Reset() {
	*x = MarkKeyshareForDepositAddressResponse{}
	mi := &file_spark_internal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressResponse) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressResponse.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{2}
}

func (x *MarkKeyshareForDepositAddressResponse) GetAddressSignature() []byte {
	if x != nil {
		return x.AddressSignature
	}
	return nil
}

type FrostRound1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyshareIds   []string               `protobuf:"bytes,1,rep,name=keyshare_ids,json=keyshareIds,proto3" json:"keyshare_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrostRound1Request) Reset() {
	*x = FrostRound1Request{}
	mi := &file_spark_internal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Request) ProtoMessage() {}

func (x *FrostRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Request.ProtoReflect.Descriptor instead.
func (*FrostRound1Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{3}
}

func (x *FrostRound1Request) GetKeyshareIds() []string {
	if x != nil {
		return x.KeyshareIds
	}
	return nil
}

type FrostRound1Response struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	SigningCommitments []*common.SigningCommitment `protobuf:"bytes,1,rep,name=signing_commitments,json=signingCommitments,proto3" json:"signing_commitments,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FrostRound1Response) Reset() {
	*x = FrostRound1Response{}
	mi := &file_spark_internal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Response) ProtoMessage() {}

func (x *FrostRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Response.ProtoReflect.Descriptor instead.
func (*FrostRound1Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{4}
}

func (x *FrostRound1Response) GetSigningCommitments() []*common.SigningCommitment {
	if x != nil {
		return x.SigningCommitments
	}
	return nil
}

type SigningJob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the signing job.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The message to sign.
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The secret package from DKG round 3.
	KeyshareId string `protobuf:"bytes,3,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	// The verifying key. This should be the total public key for both user and StatechainEntity.
	VerifyingKey []byte `protobuf:"bytes,4,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	// The commitments for all participants of the statechain.
	Commitments map[string]*common.SigningCommitment `protobuf:"bytes,5,rep,name=commitments,proto3" json:"commitments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The commitments for all participants of the user.
	UserCommitments *common.SigningCommitment `protobuf:"bytes,6,opt,name=user_commitments,json=userCommitments,proto3" json:"user_commitments,omitempty"`
	// The adaptor for the message.
	AdaptorPublicKey []byte `protobuf:"bytes,7,opt,name=adaptor_public_key,json=adaptorPublicKey,proto3" json:"adaptor_public_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SigningJob) Reset() {
	*x = SigningJob{}
	mi := &file_spark_internal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningJob) ProtoMessage() {}

func (x *SigningJob) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningJob.ProtoReflect.Descriptor instead.
func (*SigningJob) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{5}
}

func (x *SigningJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SigningJob) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SigningJob) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *SigningJob) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *SigningJob) GetCommitments() map[string]*common.SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *SigningJob) GetUserCommitments() *common.SigningCommitment {
	if x != nil {
		return x.UserCommitments
	}
	return nil
}

func (x *SigningJob) GetAdaptorPublicKey() []byte {
	if x != nil {
		return x.AdaptorPublicKey
	}
	return nil
}

type FrostRound2Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SigningJobs   []*SigningJob          `protobuf:"bytes,1,rep,name=signing_jobs,json=signingJobs,proto3" json:"signing_jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrostRound2Request) Reset() {
	*x = FrostRound2Request{}
	mi := &file_spark_internal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Request) ProtoMessage() {}

func (x *FrostRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Request.ProtoReflect.Descriptor instead.
func (*FrostRound2Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{6}
}

func (x *FrostRound2Request) GetSigningJobs() []*SigningJob {
	if x != nil {
		return x.SigningJobs
	}
	return nil
}

type FrostRound2Response struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Results       map[string]*common.SigningResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrostRound2Response) Reset() {
	*x = FrostRound2Response{}
	mi := &file_spark_internal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Response) ProtoMessage() {}

func (x *FrostRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Response.ProtoReflect.Descriptor instead.
func (*FrostRound2Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{7}
}

func (x *FrostRound2Response) GetResults() map[string]*common.SigningResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type PrepareSplitKeysharesRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	NodeId              string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TargetKeyshareId    string                 `protobuf:"bytes,2,opt,name=target_keyshare_id,json=targetKeyshareId,proto3" json:"target_keyshare_id,omitempty"`
	SelectedKeyshareIds []string               `protobuf:"bytes,3,rep,name=selected_keyshare_ids,json=selectedKeyshareIds,proto3" json:"selected_keyshare_ids,omitempty"`
	LastKeyshareId      string                 `protobuf:"bytes,4,opt,name=last_keyshare_id,json=lastKeyshareId,proto3" json:"last_keyshare_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PrepareSplitKeysharesRequest) Reset() {
	*x = PrepareSplitKeysharesRequest{}
	mi := &file_spark_internal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSplitKeysharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSplitKeysharesRequest) ProtoMessage() {}

func (x *PrepareSplitKeysharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSplitKeysharesRequest.ProtoReflect.Descriptor instead.
func (*PrepareSplitKeysharesRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{8}
}

func (x *PrepareSplitKeysharesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrepareSplitKeysharesRequest) GetTargetKeyshareId() string {
	if x != nil {
		return x.TargetKeyshareId
	}
	return ""
}

func (x *PrepareSplitKeysharesRequest) GetSelectedKeyshareIds() []string {
	if x != nil {
		return x.SelectedKeyshareIds
	}
	return nil
}

func (x *PrepareSplitKeysharesRequest) GetLastKeyshareId() string {
	if x != nil {
		return x.LastKeyshareId
	}
	return ""
}

type FinalizeTreeCreationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*TreeNode            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Network       spark.Network          `protobuf:"varint,2,opt,name=network,proto3,enum=spark.Network" json:"network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeTreeCreationRequest) Reset() {
	*x = FinalizeTreeCreationRequest{}
	mi := &file_spark_internal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTreeCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTreeCreationRequest) ProtoMessage() {}

func (x *FinalizeTreeCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTreeCreationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTreeCreationRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{9}
}

func (x *FinalizeTreeCreationRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *FinalizeTreeCreationRequest) GetNetwork() spark.Network {
	if x != nil {
		return x.Network
	}
	return spark.Network(0)
}

type FinalizeNodesAggregationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*TreeNode            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeNodesAggregationRequest) Reset() {
	*x = FinalizeNodesAggregationRequest{}
	mi := &file_spark_internal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeNodesAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeNodesAggregationRequest) ProtoMessage() {}

func (x *FinalizeNodesAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeNodesAggregationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeNodesAggregationRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{10}
}

func (x *FinalizeNodesAggregationRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FinalizeTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Nodes         []*TreeNode            `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeTransferRequest) Reset() {
	*x = FinalizeTransferRequest{}
	mi := &file_spark_internal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTransferRequest) ProtoMessage() {}

func (x *FinalizeTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTransferRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTransferRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{11}
}

func (x *FinalizeTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FinalizeTransferRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *FinalizeTransferRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type FinalizeRefreshTimelockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*TreeNode            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeRefreshTimelockRequest) Reset() {
	*x = FinalizeRefreshTimelockRequest{}
	mi := &file_spark_internal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeRefreshTimelockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRefreshTimelockRequest) ProtoMessage() {}

func (x *FinalizeRefreshTimelockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRefreshTimelockRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRefreshTimelockRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{12}
}

func (x *FinalizeRefreshTimelockRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FinalizeExtendLeafRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *TreeNode              `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeExtendLeafRequest) Reset() {
	*x = FinalizeExtendLeafRequest{}
	mi := &file_spark_internal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeExtendLeafRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeExtendLeafRequest) ProtoMessage() {}

func (x *FinalizeExtendLeafRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeExtendLeafRequest.ProtoReflect.Descriptor instead.
func (*FinalizeExtendLeafRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{13}
}

func (x *FinalizeExtendLeafRequest) GetNode() *TreeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type TreeNode struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value               uint64                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	VerifyingPubkey     []byte                 `protobuf:"bytes,3,opt,name=verifying_pubkey,json=verifyingPubkey,proto3" json:"verifying_pubkey,omitempty"`
	OwnerIdentityPubkey []byte                 `protobuf:"bytes,4,opt,name=owner_identity_pubkey,json=ownerIdentityPubkey,proto3" json:"owner_identity_pubkey,omitempty"`
	OwnerSigningPubkey  []byte                 `protobuf:"bytes,5,opt,name=owner_signing_pubkey,json=ownerSigningPubkey,proto3" json:"owner_signing_pubkey,omitempty"`
	RawTx               []byte                 `protobuf:"bytes,6,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	RawRefundTx         []byte                 `protobuf:"bytes,7,opt,name=raw_refund_tx,json=rawRefundTx,proto3" json:"raw_refund_tx,omitempty"`
	TreeId              string                 `protobuf:"bytes,8,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	ParentNodeId        *string                `protobuf:"bytes,9,opt,name=parent_node_id,json=parentNodeId,proto3,oneof" json:"parent_node_id,omitempty"`
	SigningKeyshareId   string                 `protobuf:"bytes,10,opt,name=signing_keyshare_id,json=signingKeyshareId,proto3" json:"signing_keyshare_id,omitempty"`
	Vout                uint32                 `protobuf:"varint,11,opt,name=vout,proto3" json:"vout,omitempty"`
	RefundTimelock      uint32                 `protobuf:"varint,12,opt,name=refund_timelock,json=refundTimelock,proto3" json:"refund_timelock,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	mi := &file_spark_internal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{14}
}

func (x *TreeNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNode) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TreeNode) GetVerifyingPubkey() []byte {
	if x != nil {
		return x.VerifyingPubkey
	}
	return nil
}

func (x *TreeNode) GetOwnerIdentityPubkey() []byte {
	if x != nil {
		return x.OwnerIdentityPubkey
	}
	return nil
}

func (x *TreeNode) GetOwnerSigningPubkey() []byte {
	if x != nil {
		return x.OwnerSigningPubkey
	}
	return nil
}

func (x *TreeNode) GetRawTx() []byte {
	if x != nil {
		return x.RawTx
	}
	return nil
}

func (x *TreeNode) GetRawRefundTx() []byte {
	if x != nil {
		return x.RawRefundTx
	}
	return nil
}

func (x *TreeNode) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *TreeNode) GetParentNodeId() string {
	if x != nil && x.ParentNodeId != nil {
		return *x.ParentNodeId
	}
	return ""
}

func (x *TreeNode) GetSigningKeyshareId() string {
	if x != nil {
		return x.SigningKeyshareId
	}
	return ""
}

func (x *TreeNode) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *TreeNode) GetRefundTimelock() uint32 {
	if x != nil {
		return x.RefundTimelock
	}
	return 0
}

type InitiatePreimageSwapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PreimageShare []byte                 `protobuf:"bytes,1,opt,name=preimage_share,json=preimageShare,proto3" json:"preimage_share,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiatePreimageSwapResponse) Reset() {
	*x = InitiatePreimageSwapResponse{}
	mi := &file_spark_internal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiatePreimageSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatePreimageSwapResponse) ProtoMessage() {}

func (x *InitiatePreimageSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatePreimageSwapResponse.ProtoReflect.Descriptor instead.
func (*InitiatePreimageSwapResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{15}
}

func (x *InitiatePreimageSwapResponse) GetPreimageShare() []byte {
	if x != nil {
		return x.PreimageShare
	}
	return nil
}

type PrepareTreeAddressNode struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	SigningKeyshareId string                    `protobuf:"bytes,1,opt,name=signing_keyshare_id,json=signingKeyshareId,proto3" json:"signing_keyshare_id,omitempty"`
	UserPublicKey     []byte                    `protobuf:"bytes,2,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	Children          []*PrepareTreeAddressNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PrepareTreeAddressNode) Reset() {
	*x = PrepareTreeAddressNode{}
	mi := &file_spark_internal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressNode) ProtoMessage() {}

func (x *PrepareTreeAddressNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressNode.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressNode) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{16}
}

func (x *PrepareTreeAddressNode) GetSigningKeyshareId() string {
	if x != nil {
		return x.SigningKeyshareId
	}
	return ""
}

func (x *PrepareTreeAddressNode) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

func (x *PrepareTreeAddressNode) GetChildren() []*PrepareTreeAddressNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type PrepareTreeAddressRequest struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	TargetKeyshareId string                  `protobuf:"bytes,1,opt,name=target_keyshare_id,json=targetKeyshareId,proto3" json:"target_keyshare_id,omitempty"`
	Node             *PrepareTreeAddressNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// TODO: This should be removed once we have a proper auth process.
	UserIdentityPublicKey []byte        `protobuf:"bytes,3,opt,name=user_identity_public_key,json=userIdentityPublicKey,proto3" json:"user_identity_public_key,omitempty"`
	Network               spark.Network `protobuf:"varint,4,opt,name=network,proto3,enum=spark.Network" json:"network,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PrepareTreeAddressRequest) Reset() {
	*x = PrepareTreeAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressRequest) ProtoMessage() {}

func (x *PrepareTreeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressRequest.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{17}
}

func (x *PrepareTreeAddressRequest) GetTargetKeyshareId() string {
	if x != nil {
		return x.TargetKeyshareId
	}
	return ""
}

func (x *PrepareTreeAddressRequest) GetNode() *PrepareTreeAddressNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *PrepareTreeAddressRequest) GetUserIdentityPublicKey() []byte {
	if x != nil {
		return x.UserIdentityPublicKey
	}
	return nil
}

func (x *PrepareTreeAddressRequest) GetNetwork() spark.Network {
	if x != nil {
		return x.Network
	}
	return spark.Network(0)
}

type PrepareTreeAddressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signatures    map[string][]byte      `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareTreeAddressResponse) Reset() {
	*x = PrepareTreeAddressResponse{}
	mi := &file_spark_internal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressResponse) ProtoMessage() {}

func (x *PrepareTreeAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressResponse.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{18}
}

func (x *PrepareTreeAddressResponse) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type InitiateTransferLeaf struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeafId        string                 `protobuf:"bytes,1,opt,name=leaf_id,json=leafId,proto3" json:"leaf_id,omitempty"`
	RawRefundTx   []byte                 `protobuf:"bytes,2,opt,name=raw_refund_tx,json=rawRefundTx,proto3" json:"raw_refund_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateTransferLeaf) Reset() {
	*x = InitiateTransferLeaf{}
	mi := &file_spark_internal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateTransferLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateTransferLeaf) ProtoMessage() {}

func (x *InitiateTransferLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateTransferLeaf.ProtoReflect.Descriptor instead.
func (*InitiateTransferLeaf) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{19}
}

func (x *InitiateTransferLeaf) GetLeafId() string {
	if x != nil {
		return x.LeafId
	}
	return ""
}

func (x *InitiateTransferLeaf) GetRawRefundTx() []byte {
	if x != nil {
		return x.RawRefundTx
	}
	return nil
}

type InitiateTransferRequest struct {
	state                     protoimpl.MessageState        `protogen:"open.v1"`
	TransferId                string                        `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	SenderIdentityPublicKey   []byte                        `protobuf:"bytes,2,opt,name=sender_identity_public_key,json=senderIdentityPublicKey,proto3" json:"sender_identity_public_key,omitempty"`
	ReceiverIdentityPublicKey []byte                        `protobuf:"bytes,3,opt,name=receiver_identity_public_key,json=receiverIdentityPublicKey,proto3" json:"receiver_identity_public_key,omitempty"`
	ExpiryTime                *timestamppb.Timestamp        `protobuf:"bytes,4,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Leaves                    []*InitiateTransferLeaf       `protobuf:"bytes,5,rep,name=leaves,proto3" json:"leaves,omitempty"`
	SenderKeyTweakProofs      map[string]*spark.SecretProof `protobuf:"bytes,6,rep,name=sender_key_tweak_proofs,json=senderKeyTweakProofs,proto3" json:"sender_key_tweak_proofs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *InitiateTransferRequest) Reset() {
	*x = InitiateTransferRequest{}
	mi := &file_spark_internal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateTransferRequest) ProtoMessage() {}

func (x *InitiateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateTransferRequest.ProtoReflect.Descriptor instead.
func (*InitiateTransferRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{20}
}

func (x *InitiateTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *InitiateTransferRequest) GetSenderIdentityPublicKey() []byte {
	if x != nil {
		return x.SenderIdentityPublicKey
	}
	return nil
}

func (x *InitiateTransferRequest) GetReceiverIdentityPublicKey() []byte {
	if x != nil {
		return x.ReceiverIdentityPublicKey
	}
	return nil
}

func (x *InitiateTransferRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *InitiateTransferRequest) GetLeaves() []*InitiateTransferLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

func (x *InitiateTransferRequest) GetSenderKeyTweakProofs() map[string]*spark.SecretProof {
	if x != nil {
		return x.SenderKeyTweakProofs
	}
	return nil
}

type InitiateCooperativeExitRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Transfer      *InitiateTransferRequest `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
	ExitId        string                   `protobuf:"bytes,2,opt,name=exit_id,json=exitId,proto3" json:"exit_id,omitempty"`
	ExitTxid      []byte                   `protobuf:"bytes,3,opt,name=exit_txid,json=exitTxid,proto3" json:"exit_txid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateCooperativeExitRequest) Reset() {
	*x = InitiateCooperativeExitRequest{}
	mi := &file_spark_internal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateCooperativeExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateCooperativeExitRequest) ProtoMessage() {}

func (x *InitiateCooperativeExitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateCooperativeExitRequest.ProtoReflect.Descriptor instead.
func (*InitiateCooperativeExitRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{21}
}

func (x *InitiateCooperativeExitRequest) GetTransfer() *InitiateTransferRequest {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *InitiateCooperativeExitRequest) GetExitId() string {
	if x != nil {
		return x.ExitId
	}
	return ""
}

func (x *InitiateCooperativeExitRequest) GetExitTxid() []byte {
	if x != nil {
		return x.ExitTxid
	}
	return nil
}

type UpdatePreimageRequestRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PreimageRequestId string                 `protobuf:"bytes,1,opt,name=preimage_request_id,json=preimageRequestId,proto3" json:"preimage_request_id,omitempty"`
	Preimage          []byte                 `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	IdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=identity_public_key,json=identityPublicKey,proto3" json:"identity_public_key,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdatePreimageRequestRequest) Reset() {
	*x = UpdatePreimageRequestRequest{}
	mi := &file_spark_internal_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePreimageRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreimageRequestRequest) ProtoMessage() {}

func (x *UpdatePreimageRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreimageRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdatePreimageRequestRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{22}
}

func (x *UpdatePreimageRequestRequest) GetPreimageRequestId() string {
	if x != nil {
		return x.PreimageRequestId
	}
	return ""
}

func (x *UpdatePreimageRequestRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *UpdatePreimageRequestRequest) GetIdentityPublicKey() []byte {
	if x != nil {
		return x.IdentityPublicKey
	}
	return nil
}

type StartTokenTransactionInternalRequest struct {
	state                      protoimpl.MessageState            `protogen:"open.v1"`
	FinalTokenTransaction      *spark.TokenTransaction           `protobuf:"bytes,1,opt,name=final_token_transaction,json=finalTokenTransaction,proto3" json:"final_token_transaction,omitempty"`
	TokenTransactionSignatures *spark.TokenTransactionSignatures `protobuf:"bytes,2,opt,name=token_transaction_signatures,json=tokenTransactionSignatures,proto3" json:"token_transaction_signatures,omitempty"`
	KeyshareIds                []string                          `protobuf:"bytes,3,rep,name=keyshare_ids,json=keyshareIds,proto3" json:"keyshare_ids,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *StartTokenTransactionInternalRequest) Reset() {
	*x = StartTokenTransactionInternalRequest{}
	mi := &file_spark_internal_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTokenTransactionInternalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTokenTransactionInternalRequest) ProtoMessage() {}

func (x *StartTokenTransactionInternalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTokenTransactionInternalRequest.ProtoReflect.Descriptor instead.
func (*StartTokenTransactionInternalRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{23}
}

func (x *StartTokenTransactionInternalRequest) GetFinalTokenTransaction() *spark.TokenTransaction {
	if x != nil {
		return x.FinalTokenTransaction
	}
	return nil
}

func (x *StartTokenTransactionInternalRequest) GetTokenTransactionSignatures() *spark.TokenTransactionSignatures {
	if x != nil {
		return x.TokenTransactionSignatures
	}
	return nil
}

func (x *StartTokenTransactionInternalRequest) GetKeyshareIds() []string {
	if x != nil {
		return x.KeyshareIds
	}
	return nil
}

type StartTokenTransactionInternalResponse struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	FinalTokenTransaction *spark.TokenTransaction `protobuf:"bytes,1,opt,name=final_token_transaction,json=finalTokenTransaction,proto3" json:"final_token_transaction,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StartTokenTransactionInternalResponse) Reset() {
	*x = StartTokenTransactionInternalResponse{}
	mi := &file_spark_internal_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTokenTransactionInternalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTokenTransactionInternalResponse) ProtoMessage() {}

func (x *StartTokenTransactionInternalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTokenTransactionInternalResponse.ProtoReflect.Descriptor instead.
func (*StartTokenTransactionInternalResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{24}
}

func (x *StartTokenTransactionInternalResponse) GetFinalTokenTransaction() *spark.TokenTransaction {
	if x != nil {
		return x.FinalTokenTransaction
	}
	return nil
}

type InitiateSettleReceiverKeyTweakRequest struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	TransferId     string                        `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	KeyTweakProofs map[string]*spark.SecretProof `protobuf:"bytes,2,rep,name=key_tweak_proofs,json=keyTweakProofs,proto3" json:"key_tweak_proofs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InitiateSettleReceiverKeyTweakRequest) Reset() {
	*x = InitiateSettleReceiverKeyTweakRequest{}
	mi := &file_spark_internal_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateSettleReceiverKeyTweakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSettleReceiverKeyTweakRequest) ProtoMessage() {}

func (x *InitiateSettleReceiverKeyTweakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSettleReceiverKeyTweakRequest.ProtoReflect.Descriptor instead.
func (*InitiateSettleReceiverKeyTweakRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{25}
}

func (x *InitiateSettleReceiverKeyTweakRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *InitiateSettleReceiverKeyTweakRequest) GetKeyTweakProofs() map[string]*spark.SecretProof {
	if x != nil {
		return x.KeyTweakProofs
	}
	return nil
}

type SettleReceiverKeyTweakRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	TweakKey      bool                   `protobuf:"varint,2,opt,name=tweak_key,json=tweakKey,proto3" json:"tweak_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettleReceiverKeyTweakRequest) Reset() {
	*x = SettleReceiverKeyTweakRequest{}
	mi := &file_spark_internal_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettleReceiverKeyTweakRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleReceiverKeyTweakRequest) ProtoMessage() {}

func (x *SettleReceiverKeyTweakRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleReceiverKeyTweakRequest.ProtoReflect.Descriptor instead.
func (*SettleReceiverKeyTweakRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{26}
}

func (x *SettleReceiverKeyTweakRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *SettleReceiverKeyTweakRequest) GetTweakKey() bool {
	if x != nil {
		return x.TweakKey
	}
	return false
}

var File_spark_internal_proto protoreflect.FileDescriptor

const file_spark_internal_proto_rawDesc = "" +
	"\n" +
	"\x14spark_internal.proto\x12\x0espark_internal\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\fcommon.proto\x1a\vspark.proto\"=\n" +
	"\x1aMarkKeysharesAsUsedRequest\x12\x1f\n" +
	"\vkeyshare_id\x18\x01 \x03(\tR\n" +
	"keyshareId\"\xd5\x01\n" +
	"$MarkKeyshareForDepositAddressRequest\x12\x1f\n" +
	"\vkeyshare_id\x18\x01 \x01(\tR\n" +
	"keyshareId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x129\n" +
	"\x19owner_identity_public_key\x18\x03 \x01(\fR\x16ownerIdentityPublicKey\x127\n" +
	"\x18owner_signing_public_key\x18\x04 \x01(\fR\x15ownerSigningPublicKey\"T\n" +
	"%MarkKeyshareForDepositAddressResponse\x12+\n" +
	"\x11address_signature\x18\x01 \x01(\fR\x10addressSignature\"7\n" +
	"\x12FrostRound1Request\x12!\n" +
	"\fkeyshare_ids\x18\x01 \x03(\tR\vkeyshareIds\"a\n" +
	"\x13FrostRound1Response\x12J\n" +
	"\x13signing_commitments\x18\x01 \x03(\v2\x19.common.SigningCommitmentR\x12signingCommitments\"\xa1\x03\n" +
	"\n" +
	"SigningJob\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\tR\x05jobId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\fR\amessage\x12\x1f\n" +
	"\vkeyshare_id\x18\x03 \x01(\tR\n" +
	"keyshareId\x12#\n" +
	"\rverifying_key\x18\x04 \x01(\fR\fverifyingKey\x12M\n" +
	"\vcommitments\x18\x05 \x03(\v2+.spark_internal.SigningJob.CommitmentsEntryR\vcommitments\x12D\n" +
	"\x10user_commitments\x18\x06 \x01(\v2\x19.common.SigningCommitmentR\x0fuserCommitments\x12,\n" +
	"\x12adaptor_public_key\x18\a \x01(\fR\x10adaptorPublicKey\x1aY\n" +
	"\x10CommitmentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.common.SigningCommitmentR\x05value:\x028\x01\"S\n" +
	"\x12FrostRound2Request\x12=\n" +
	"\fsigning_jobs\x18\x01 \x03(\v2\x1a.spark_internal.SigningJobR\vsigningJobs\"\xb4\x01\n" +
	"\x13FrostRound2Response\x12J\n" +
	"\aresults\x18\x01 \x03(\v20.spark_internal.FrostRound2Response.ResultsEntryR\aresults\x1aQ\n" +
	"\fResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.common.SigningResultR\x05value:\x028\x01\"\xc3\x01\n" +
	"\x1cPrepareSplitKeysharesRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12,\n" +
	"\x12target_keyshare_id\x18\x02 \x01(\tR\x10targetKeyshareId\x122\n" +
	"\x15selected_keyshare_ids\x18\x03 \x03(\tR\x13selectedKeyshareIds\x12(\n" +
	"\x10last_keyshare_id\x18\x04 \x01(\tR\x0elastKeyshareId\"w\n" +
	"\x1bFinalizeTreeCreationRequest\x12.\n" +
	"\x05nodes\x18\x01 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\x12(\n" +
	"\anetwork\x18\x02 \x01(\x0e2\x0e.spark.NetworkR\anetwork\"Q\n" +
	"\x1fFinalizeNodesAggregationRequest\x12.\n" +
	"\x05nodes\x18\x01 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\"\xa4\x01\n" +
	"\x17FinalizeTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12.\n" +
	"\x05nodes\x18\x02 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"P\n" +
	"\x1eFinalizeRefreshTimelockRequest\x12.\n" +
	"\x05nodes\x18\x01 \x03(\v2\x18.spark_internal.TreeNodeR\x05nodes\"I\n" +
	"\x19FinalizeExtendLeafRequest\x12,\n" +
	"\x04node\x18\x01 \x01(\v2\x18.spark_internal.TreeNodeR\x04node\"\xc0\x03\n" +
	"\bTreeNode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value\x12)\n" +
	"\x10verifying_pubkey\x18\x03 \x01(\fR\x0fverifyingPubkey\x122\n" +
	"\x15owner_identity_pubkey\x18\x04 \x01(\fR\x13ownerIdentityPubkey\x120\n" +
	"\x14owner_signing_pubkey\x18\x05 \x01(\fR\x12ownerSigningPubkey\x12\x15\n" +
	"\x06raw_tx\x18\x06 \x01(\fR\x05rawTx\x12\"\n" +
	"\rraw_refund_tx\x18\a \x01(\fR\vrawRefundTx\x12\x17\n" +
	"\atree_id\x18\b \x01(\tR\x06treeId\x12)\n" +
	"\x0eparent_node_id\x18\t \x01(\tH\x00R\fparentNodeId\x88\x01\x01\x12.\n" +
	"\x13signing_keyshare_id\x18\n" +
	" \x01(\tR\x11signingKeyshareId\x12\x12\n" +
	"\x04vout\x18\v \x01(\rR\x04vout\x12'\n" +
	"\x0frefund_timelock\x18\f \x01(\rR\x0erefundTimelockB\x11\n" +
	"\x0f_parent_node_id\"E\n" +
	"\x1cInitiatePreimageSwapResponse\x12%\n" +
	"\x0epreimage_share\x18\x01 \x01(\fR\rpreimageShare\"\xb4\x01\n" +
	"\x16PrepareTreeAddressNode\x12.\n" +
	"\x13signing_keyshare_id\x18\x01 \x01(\tR\x11signingKeyshareId\x12&\n" +
	"\x0fuser_public_key\x18\x02 \x01(\fR\ruserPublicKey\x12B\n" +
	"\bchildren\x18\x03 \x03(\v2&.spark_internal.PrepareTreeAddressNodeR\bchildren\"\xe8\x01\n" +
	"\x19PrepareTreeAddressRequest\x12,\n" +
	"\x12target_keyshare_id\x18\x01 \x01(\tR\x10targetKeyshareId\x12:\n" +
	"\x04node\x18\x02 \x01(\v2&.spark_internal.PrepareTreeAddressNodeR\x04node\x127\n" +
	"\x18user_identity_public_key\x18\x03 \x01(\fR\x15userIdentityPublicKey\x12(\n" +
	"\anetwork\x18\x04 \x01(\x0e2\x0e.spark.NetworkR\anetwork\"\xb7\x01\n" +
	"\x1aPrepareTreeAddressResponse\x12Z\n" +
	"\n" +
	"signatures\x18\x01 \x03(\v2:.spark_internal.PrepareTreeAddressResponse.SignaturesEntryR\n" +
	"signatures\x1a=\n" +
	"\x0fSignaturesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"S\n" +
	"\x14InitiateTransferLeaf\x12\x17\n" +
	"\aleaf_id\x18\x01 \x01(\tR\x06leafId\x12\"\n" +
	"\rraw_refund_tx\x18\x02 \x01(\fR\vrawRefundTx\"\x8a\x04\n" +
	"\x17InitiateTransferRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12;\n" +
	"\x1asender_identity_public_key\x18\x02 \x01(\fR\x17senderIdentityPublicKey\x12?\n" +
	"\x1creceiver_identity_public_key\x18\x03 \x01(\fR\x19receiverIdentityPublicKey\x12;\n" +
	"\vexpiry_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiryTime\x12<\n" +
	"\x06leaves\x18\x05 \x03(\v2$.spark_internal.InitiateTransferLeafR\x06leaves\x12x\n" +
	"\x17sender_key_tweak_proofs\x18\x06 \x03(\v2A.spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntryR\x14senderKeyTweakProofs\x1a[\n" +
	"\x19SenderKeyTweakProofsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.spark.SecretProofR\x05value:\x028\x01\"\x9b\x01\n" +
	"\x1eInitiateCooperativeExitRequest\x12C\n" +
	"\btransfer\x18\x01 \x01(\v2'.spark_internal.InitiateTransferRequestR\btransfer\x12\x17\n" +
	"\aexit_id\x18\x02 \x01(\tR\x06exitId\x12\x1b\n" +
	"\texit_txid\x18\x03 \x01(\fR\bexitTxid\"\x9a\x01\n" +
	"\x1cUpdatePreimageRequestRequest\x12.\n" +
	"\x13preimage_request_id\x18\x01 \x01(\tR\x11preimageRequestId\x12\x1a\n" +
	"\bpreimage\x18\x02 \x01(\fR\bpreimage\x12.\n" +
	"\x13identity_public_key\x18\x03 \x01(\fR\x11identityPublicKey\"\xff\x01\n" +
	"$StartTokenTransactionInternalRequest\x12O\n" +
	"\x17final_token_transaction\x18\x01 \x01(\v2\x17.spark.TokenTransactionR\x15finalTokenTransaction\x12c\n" +
	"\x1ctoken_transaction_signatures\x18\x02 \x01(\v2!.spark.TokenTransactionSignaturesR\x1atokenTransactionSignatures\x12!\n" +
	"\fkeyshare_ids\x18\x03 \x03(\tR\vkeyshareIds\"x\n" +
	"%StartTokenTransactionInternalResponse\x12O\n" +
	"\x17final_token_transaction\x18\x01 \x01(\v2\x17.spark.TokenTransactionR\x15finalTokenTransaction\"\x94\x02\n" +
	"%InitiateSettleReceiverKeyTweakRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12s\n" +
	"\x10key_tweak_proofs\x18\x02 \x03(\v2I.spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntryR\x0ekeyTweakProofs\x1aU\n" +
	"\x13KeyTweakProofsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.spark.SecretProofR\x05value:\x028\x01\"]\n" +
	"\x1dSettleReceiverKeyTweakRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x1b\n" +
	"\ttweak_key\x18\x02 \x01(\bR\btweakKey2\xa4\x11\n" +
	"\x14SparkInternalService\x12^\n" +
	"\x16mark_keyshares_as_used\x12*.spark_internal.MarkKeysharesAsUsedRequest\x1a\x16.google.protobuf.Empty\"\x00\x12\x92\x01\n" +
	"!mark_keyshare_for_deposit_address\x124.spark_internal.MarkKeyshareForDepositAddressRequest\x1a5.spark_internal.MarkKeyshareForDepositAddressResponse\"\x00\x12_\n" +
	"\x16finalize_tree_creation\x12+.spark_internal.FinalizeTreeCreationRequest\x1a\x16.google.protobuf.Empty\"\x00\x12Y\n" +
	"\ffrost_round1\x12\".spark_internal.FrostRound1Request\x1a#.spark_internal.FrostRound1Response\"\x00\x12Y\n" +
	"\ffrost_round2\x12\".spark_internal.FrostRound2Request\x1a#.spark_internal.FrostRound2Response\"\x00\x12a\n" +
	"\x17prepare_split_keyshares\x12,.spark_internal.PrepareSplitKeysharesRequest\x1a\x16.google.protobuf.Empty\"\x00\x12I\n" +
	"\x0faggregate_nodes\x12\x1c.spark.AggregateNodesRequest\x1a\x16.google.protobuf.Empty\"\x00\x12g\n" +
	"\x1afinalize_nodes_aggregation\x12/.spark_internal.FinalizeNodesAggregationRequest\x1a\x16.google.protobuf.Empty\"\x00\x12V\n" +
	"\x11finalize_transfer\x12'.spark_internal.FinalizeTransferRequest\x1a\x16.google.protobuf.Empty\"\x00\x12e\n" +
	"\x19finalize_refresh_timelock\x12..spark_internal.FinalizeRefreshTimelockRequest\x1a\x16.google.protobuf.Empty\"\x00\x12[\n" +
	"\x14finalize_extend_leaf\x12).spark_internal.FinalizeExtendLeafRequest\x1a\x16.google.protobuf.Empty\"\x00\x12l\n" +
	"\x16initiate_preimage_swap\x12\".spark.InitiatePreimageSwapRequest\x1a,.spark_internal.InitiatePreimageSwapResponse\"\x00\x12K\n" +
	"\x10provide_preimage\x12\x1d.spark.ProvidePreimageRequest\x1a\x16.google.protobuf.Empty\"\x00\x12a\n" +
	"\x17update_preimage_request\x12,.spark_internal.UpdatePreimageRequestRequest\x1a\x16.google.protobuf.Empty\"\x00\x12o\n" +
	"\x14prepare_tree_address\x12).spark_internal.PrepareTreeAddressRequest\x1a*.spark_internal.PrepareTreeAddressResponse\"\x00\x12V\n" +
	"\x11initiate_transfer\x12'.spark_internal.InitiateTransferRequest\x1a\x16.google.protobuf.Empty\"\x00\x12e\n" +
	"\x19initiate_cooperative_exit\x12..spark_internal.InitiateCooperativeExitRequest\x1a\x16.google.protobuf.Empty\"\x00\x12Z\n" +
	"\x18return_lightning_payment\x12$.spark.ReturnLightningPaymentRequest\x1a\x16.google.protobuf.Empty\"\x00\x12r\n" +
	" start_token_transaction_internal\x124.spark_internal.StartTokenTransactionInternalRequest\x1a\x16.google.protobuf.Empty\"\x00\x12R\n" +
	"\x14cancel_send_transfer\x12 .spark.CancelSendTransferRequest\x1a\x16.google.protobuf.Empty\"\x00\x12u\n" +
	"\"initiate_settle_receiver_key_tweak\x125.spark_internal.InitiateSettleReceiverKeyTweakRequest\x1a\x16.google.protobuf.Empty\"\x00\x12d\n" +
	"\x19settle_receiver_key_tweak\x12-.spark_internal.SettleReceiverKeyTweakRequest\x1a\x16.google.protobuf.Empty\"\x00B8Z6github.com/lightsparkdev/spark-go/proto/spark_internalb\x06proto3"

var (
	file_spark_internal_proto_rawDescOnce sync.Once
	file_spark_internal_proto_rawDescData []byte
)

func file_spark_internal_proto_rawDescGZIP() []byte {
	file_spark_internal_proto_rawDescOnce.Do(func() {
		file_spark_internal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spark_internal_proto_rawDesc), len(file_spark_internal_proto_rawDesc)))
	})
	return file_spark_internal_proto_rawDescData
}

var file_spark_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_spark_internal_proto_goTypes = []any{
	(*MarkKeysharesAsUsedRequest)(nil),            // 0: spark_internal.MarkKeysharesAsUsedRequest
	(*MarkKeyshareForDepositAddressRequest)(nil),  // 1: spark_internal.MarkKeyshareForDepositAddressRequest
	(*MarkKeyshareForDepositAddressResponse)(nil), // 2: spark_internal.MarkKeyshareForDepositAddressResponse
	(*FrostRound1Request)(nil),                    // 3: spark_internal.FrostRound1Request
	(*FrostRound1Response)(nil),                   // 4: spark_internal.FrostRound1Response
	(*SigningJob)(nil),                            // 5: spark_internal.SigningJob
	(*FrostRound2Request)(nil),                    // 6: spark_internal.FrostRound2Request
	(*FrostRound2Response)(nil),                   // 7: spark_internal.FrostRound2Response
	(*PrepareSplitKeysharesRequest)(nil),          // 8: spark_internal.PrepareSplitKeysharesRequest
	(*FinalizeTreeCreationRequest)(nil),           // 9: spark_internal.FinalizeTreeCreationRequest
	(*FinalizeNodesAggregationRequest)(nil),       // 10: spark_internal.FinalizeNodesAggregationRequest
	(*FinalizeTransferRequest)(nil),               // 11: spark_internal.FinalizeTransferRequest
	(*FinalizeRefreshTimelockRequest)(nil),        // 12: spark_internal.FinalizeRefreshTimelockRequest
	(*FinalizeExtendLeafRequest)(nil),             // 13: spark_internal.FinalizeExtendLeafRequest
	(*TreeNode)(nil),                              // 14: spark_internal.TreeNode
	(*InitiatePreimageSwapResponse)(nil),          // 15: spark_internal.InitiatePreimageSwapResponse
	(*PrepareTreeAddressNode)(nil),                // 16: spark_internal.PrepareTreeAddressNode
	(*PrepareTreeAddressRequest)(nil),             // 17: spark_internal.PrepareTreeAddressRequest
	(*PrepareTreeAddressResponse)(nil),            // 18: spark_internal.PrepareTreeAddressResponse
	(*InitiateTransferLeaf)(nil),                  // 19: spark_internal.InitiateTransferLeaf
	(*InitiateTransferRequest)(nil),               // 20: spark_internal.InitiateTransferRequest
	(*InitiateCooperativeExitRequest)(nil),        // 21: spark_internal.InitiateCooperativeExitRequest
	(*UpdatePreimageRequestRequest)(nil),          // 22: spark_internal.UpdatePreimageRequestRequest
	(*StartTokenTransactionInternalRequest)(nil),  // 23: spark_internal.StartTokenTransactionInternalRequest
	(*StartTokenTransactionInternalResponse)(nil), // 24: spark_internal.StartTokenTransactionInternalResponse
	(*InitiateSettleReceiverKeyTweakRequest)(nil), // 25: spark_internal.InitiateSettleReceiverKeyTweakRequest
	(*SettleReceiverKeyTweakRequest)(nil),         // 26: spark_internal.SettleReceiverKeyTweakRequest
	nil,                                           // 27: spark_internal.SigningJob.CommitmentsEntry
	nil,                                           // 28: spark_internal.FrostRound2Response.ResultsEntry
	nil,                                           // 29: spark_internal.PrepareTreeAddressResponse.SignaturesEntry
	nil,                                           // 30: spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntry
	nil,                                           // 31: spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntry
	(*common.SigningCommitment)(nil),              // 32: common.SigningCommitment
	(spark.Network)(0),                            // 33: spark.Network
	(*timestamppb.Timestamp)(nil),                 // 34: google.protobuf.Timestamp
	(*spark.TokenTransaction)(nil),                // 35: spark.TokenTransaction
	(*spark.TokenTransactionSignatures)(nil),      // 36: spark.TokenTransactionSignatures
	(*common.SigningResult)(nil),                  // 37: common.SigningResult
	(*spark.SecretProof)(nil),                     // 38: spark.SecretProof
	(*spark.AggregateNodesRequest)(nil),           // 39: spark.AggregateNodesRequest
	(*spark.InitiatePreimageSwapRequest)(nil),     // 40: spark.InitiatePreimageSwapRequest
	(*spark.ProvidePreimageRequest)(nil),          // 41: spark.ProvidePreimageRequest
	(*spark.ReturnLightningPaymentRequest)(nil),   // 42: spark.ReturnLightningPaymentRequest
	(*spark.CancelSendTransferRequest)(nil),       // 43: spark.CancelSendTransferRequest
	(*emptypb.Empty)(nil),                         // 44: google.protobuf.Empty
}
var file_spark_internal_proto_depIdxs = []int32{
	32, // 0: spark_internal.FrostRound1Response.signing_commitments:type_name -> common.SigningCommitment
	27, // 1: spark_internal.SigningJob.commitments:type_name -> spark_internal.SigningJob.CommitmentsEntry
	32, // 2: spark_internal.SigningJob.user_commitments:type_name -> common.SigningCommitment
	5,  // 3: spark_internal.FrostRound2Request.signing_jobs:type_name -> spark_internal.SigningJob
	28, // 4: spark_internal.FrostRound2Response.results:type_name -> spark_internal.FrostRound2Response.ResultsEntry
	14, // 5: spark_internal.FinalizeTreeCreationRequest.nodes:type_name -> spark_internal.TreeNode
	33, // 6: spark_internal.FinalizeTreeCreationRequest.network:type_name -> spark.Network
	14, // 7: spark_internal.FinalizeNodesAggregationRequest.nodes:type_name -> spark_internal.TreeNode
	14, // 8: spark_internal.FinalizeTransferRequest.nodes:type_name -> spark_internal.TreeNode
	34, // 9: spark_internal.FinalizeTransferRequest.timestamp:type_name -> google.protobuf.Timestamp
	14, // 10: spark_internal.FinalizeRefreshTimelockRequest.nodes:type_name -> spark_internal.TreeNode
	14, // 11: spark_internal.FinalizeExtendLeafRequest.node:type_name -> spark_internal.TreeNode
	16, // 12: spark_internal.PrepareTreeAddressNode.children:type_name -> spark_internal.PrepareTreeAddressNode
	16, // 13: spark_internal.PrepareTreeAddressRequest.node:type_name -> spark_internal.PrepareTreeAddressNode
	33, // 14: spark_internal.PrepareTreeAddressRequest.network:type_name -> spark.Network
	29, // 15: spark_internal.PrepareTreeAddressResponse.signatures:type_name -> spark_internal.PrepareTreeAddressResponse.SignaturesEntry
	34, // 16: spark_internal.InitiateTransferRequest.expiry_time:type_name -> google.protobuf.Timestamp
	19, // 17: spark_internal.InitiateTransferRequest.leaves:type_name -> spark_internal.InitiateTransferLeaf
	30, // 18: spark_internal.InitiateTransferRequest.sender_key_tweak_proofs:type_name -> spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntry
	20, // 19: spark_internal.InitiateCooperativeExitRequest.transfer:type_name -> spark_internal.InitiateTransferRequest
	35, // 20: spark_internal.StartTokenTransactionInternalRequest.final_token_transaction:type_name -> spark.TokenTransaction
	36, // 21: spark_internal.StartTokenTransactionInternalRequest.token_transaction_signatures:type_name -> spark.TokenTransactionSignatures
	35, // 22: spark_internal.StartTokenTransactionInternalResponse.final_token_transaction:type_name -> spark.TokenTransaction
	31, // 23: spark_internal.InitiateSettleReceiverKeyTweakRequest.key_tweak_proofs:type_name -> spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntry
	32, // 24: spark_internal.SigningJob.CommitmentsEntry.value:type_name -> common.SigningCommitment
	37, // 25: spark_internal.FrostRound2Response.ResultsEntry.value:type_name -> common.SigningResult
	38, // 26: spark_internal.InitiateTransferRequest.SenderKeyTweakProofsEntry.value:type_name -> spark.SecretProof
	38, // 27: spark_internal.InitiateSettleReceiverKeyTweakRequest.KeyTweakProofsEntry.value:type_name -> spark.SecretProof
	0,  // 28: spark_internal.SparkInternalService.mark_keyshares_as_used:input_type -> spark_internal.MarkKeysharesAsUsedRequest
	1,  // 29: spark_internal.SparkInternalService.mark_keyshare_for_deposit_address:input_type -> spark_internal.MarkKeyshareForDepositAddressRequest
	9,  // 30: spark_internal.SparkInternalService.finalize_tree_creation:input_type -> spark_internal.FinalizeTreeCreationRequest
	3,  // 31: spark_internal.SparkInternalService.frost_round1:input_type -> spark_internal.FrostRound1Request
	6,  // 32: spark_internal.SparkInternalService.frost_round2:input_type -> spark_internal.FrostRound2Request
	8,  // 33: spark_internal.SparkInternalService.prepare_split_keyshares:input_type -> spark_internal.PrepareSplitKeysharesRequest
	39, // 34: spark_internal.SparkInternalService.aggregate_nodes:input_type -> spark.AggregateNodesRequest
	10, // 35: spark_internal.SparkInternalService.finalize_nodes_aggregation:input_type -> spark_internal.FinalizeNodesAggregationRequest
	11, // 36: spark_internal.SparkInternalService.finalize_transfer:input_type -> spark_internal.FinalizeTransferRequest
	12, // 37: spark_internal.SparkInternalService.finalize_refresh_timelock:input_type -> spark_internal.FinalizeRefreshTimelockRequest
	13, // 38: spark_internal.SparkInternalService.finalize_extend_leaf:input_type -> spark_internal.FinalizeExtendLeafRequest
	40, // 39: spark_internal.SparkInternalService.initiate_preimage_swap:input_type -> spark.InitiatePreimageSwapRequest
	41, // 40: spark_internal.SparkInternalService.provide_preimage:input_type -> spark.ProvidePreimageRequest
	22, // 41: spark_internal.SparkInternalService.update_preimage_request:input_type -> spark_internal.UpdatePreimageRequestRequest
	17, // 42: spark_internal.SparkInternalService.prepare_tree_address:input_type -> spark_internal.PrepareTreeAddressRequest
	20, // 43: spark_internal.SparkInternalService.initiate_transfer:input_type -> spark_internal.InitiateTransferRequest
	21, // 44: spark_internal.SparkInternalService.initiate_cooperative_exit:input_type -> spark_internal.InitiateCooperativeExitRequest
	42, // 45: spark_internal.SparkInternalService.return_lightning_payment:input_type -> spark.ReturnLightningPaymentRequest
	23, // 46: spark_internal.SparkInternalService.start_token_transaction_internal:input_type -> spark_internal.StartTokenTransactionInternalRequest
	43, // 47: spark_internal.SparkInternalService.cancel_send_transfer:input_type -> spark.CancelSendTransferRequest
	25, // 48: spark_internal.SparkInternalService.initiate_settle_receiver_key_tweak:input_type -> spark_internal.InitiateSettleReceiverKeyTweakRequest
	26, // 49: spark_internal.SparkInternalService.settle_receiver_key_tweak:input_type -> spark_internal.SettleReceiverKeyTweakRequest
	44, // 50: spark_internal.SparkInternalService.mark_keyshares_as_used:output_type -> google.protobuf.Empty
	2,  // 51: spark_internal.SparkInternalService.mark_keyshare_for_deposit_address:output_type -> spark_internal.MarkKeyshareForDepositAddressResponse
	44, // 52: spark_internal.SparkInternalService.finalize_tree_creation:output_type -> google.protobuf.Empty
	4,  // 53: spark_internal.SparkInternalService.frost_round1:output_type -> spark_internal.FrostRound1Response
	7,  // 54: spark_internal.SparkInternalService.frost_round2:output_type -> spark_internal.FrostRound2Response
	44, // 55: spark_internal.SparkInternalService.prepare_split_keyshares:output_type -> google.protobuf.Empty
	44, // 56: spark_internal.SparkInternalService.aggregate_nodes:output_type -> google.protobuf.Empty
	44, // 57: spark_internal.SparkInternalService.finalize_nodes_aggregation:output_type -> google.protobuf.Empty
	44, // 58: spark_internal.SparkInternalService.finalize_transfer:output_type -> google.protobuf.Empty
	44, // 59: spark_internal.SparkInternalService.finalize_refresh_timelock:output_type -> google.protobuf.Empty
	44, // 60: spark_internal.SparkInternalService.finalize_extend_leaf:output_type -> google.protobuf.Empty
	15, // 61: spark_internal.SparkInternalService.initiate_preimage_swap:output_type -> spark_internal.InitiatePreimageSwapResponse
	44, // 62: spark_internal.SparkInternalService.provide_preimage:output_type -> google.protobuf.Empty
	44, // 63: spark_internal.SparkInternalService.update_preimage_request:output_type -> google.protobuf.Empty
	18, // 64: spark_internal.SparkInternalService.prepare_tree_address:output_type -> spark_internal.PrepareTreeAddressResponse
	44, // 65: spark_internal.SparkInternalService.initiate_transfer:output_type -> google.protobuf.Empty
	44, // 66: spark_internal.SparkInternalService.initiate_cooperative_exit:output_type -> google.protobuf.Empty
	44, // 67: spark_internal.SparkInternalService.return_lightning_payment:output_type -> google.protobuf.Empty
	44, // 68: spark_internal.SparkInternalService.start_token_transaction_internal:output_type -> google.protobuf.Empty
	44, // 69: spark_internal.SparkInternalService.cancel_send_transfer:output_type -> google.protobuf.Empty
	44, // 70: spark_internal.SparkInternalService.initiate_settle_receiver_key_tweak:output_type -> google.protobuf.Empty
	44, // 71: spark_internal.SparkInternalService.settle_receiver_key_tweak:output_type -> google.protobuf.Empty
	50, // [50:72] is the sub-list for method output_type
	28, // [28:50] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_spark_internal_proto_init() }
func file_spark_internal_proto_init() {
	if File_spark_internal_proto != nil {
		return
	}
	file_spark_internal_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spark_internal_proto_rawDesc), len(file_spark_internal_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_internal_proto_goTypes,
		DependencyIndexes: file_spark_internal_proto_depIdxs,
		MessageInfos:      file_spark_internal_proto_msgTypes,
	}.Build()
	File_spark_internal_proto = out.File
	file_spark_internal_proto_goTypes = nil
	file_spark_internal_proto_depIdxs = nil
}
