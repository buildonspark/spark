//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: mock.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Mock_MockServiceClient`, then call methods of this protocol to make API calls.
public protocol Mock_MockServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? { get }

  func set_mock_onchain_tx(
    _ request: Mock_SetMockOnchainTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Mock_SetMockOnchainTxRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Mock_MockServiceClientProtocol {
  public var serviceName: String {
    return "mock.MockService"
  }

  /// Unary call to set_mock_onchain_tx
  ///
  /// - Parameters:
  ///   - request: Request to send to set_mock_onchain_tx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func set_mock_onchain_tx(
    _ request: Mock_SetMockOnchainTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Mock_SetMockOnchainTxRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Mock_MockServiceClientMetadata.Methods.set_mock_onchain_tx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeset_mock_onchain_txInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Mock_MockServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Mock_MockServiceNIOClient")
public final class Mock_MockServiceClient: Mock_MockServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Mock_MockServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the mock.MockService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Mock_MockServiceNIOClient: Mock_MockServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Mock_MockServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the mock.MockService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Mock_MockServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? { get }

  func makeSetMockOnchainTxCall(
    _ request: Mock_SetMockOnchainTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Mock_SetMockOnchainTxRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Mock_MockServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Mock_MockServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSetMockOnchainTxCall(
    _ request: Mock_SetMockOnchainTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Mock_SetMockOnchainTxRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Mock_MockServiceClientMetadata.Methods.set_mock_onchain_tx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeset_mock_onchain_txInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Mock_MockServiceAsyncClientProtocol {
  public func set_mock_onchain_tx(
    _ request: Mock_SetMockOnchainTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Mock_MockServiceClientMetadata.Methods.set_mock_onchain_tx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeset_mock_onchain_txInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Mock_MockServiceAsyncClient: Mock_MockServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Mock_MockServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Mock_MockServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Mock_MockServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'set_mock_onchain_tx'.
  func makeset_mock_onchain_txInterceptors() -> [ClientInterceptor<Mock_SetMockOnchainTxRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Mock_MockServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MockService",
    fullName: "mock.MockService",
    methods: [
      Mock_MockServiceClientMetadata.Methods.set_mock_onchain_tx,
    ]
  )

  public enum Methods {
    public static let set_mock_onchain_tx = GRPCMethodDescriptor(
      name: "set_mock_onchain_tx",
      path: "/mock.MockService/set_mock_onchain_tx",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Mock_MockServiceProvider: CallHandlerProvider {
  var interceptors: Mock_MockServiceServerInterceptorFactoryProtocol? { get }

  func set_mock_onchain_tx(request: Mock_SetMockOnchainTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Mock_MockServiceProvider {
  public var serviceName: Substring {
    return Mock_MockServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "set_mock_onchain_tx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mock_SetMockOnchainTxRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeset_mock_onchain_txInterceptors() ?? [],
        userFunction: self.set_mock_onchain_tx(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Mock_MockServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Mock_MockServiceServerInterceptorFactoryProtocol? { get }

  func set_mock_onchain_tx(
    request: Mock_SetMockOnchainTxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Mock_MockServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Mock_MockServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Mock_MockServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Mock_MockServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "set_mock_onchain_tx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Mock_SetMockOnchainTxRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeset_mock_onchain_txInterceptors() ?? [],
        wrapping: { try await self.set_mock_onchain_tx(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Mock_MockServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'set_mock_onchain_tx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeset_mock_onchain_txInterceptors() -> [ServerInterceptor<Mock_SetMockOnchainTxRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Mock_MockServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MockService",
    fullName: "mock.MockService",
    methods: [
      Mock_MockServiceServerMetadata.Methods.set_mock_onchain_tx,
    ]
  )

  public enum Methods {
    public static let set_mock_onchain_tx = GRPCMethodDescriptor(
      name: "set_mock_onchain_tx",
      path: "/mock.MockService/set_mock_onchain_tx",
      type: GRPCCallType.unary
    )
  }
}
