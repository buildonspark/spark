//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: spark.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Spark_SparkServiceClient`, then call methods of this protocol to make API calls.
public protocol Spark_SparkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? { get }

  func generate_deposit_address(
    _ request: Spark_GenerateDepositAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_GenerateDepositAddressRequest, Spark_GenerateDepositAddressResponse>

  func start_deposit_tree_creation(
    _ request: Spark_StartDepositTreeCreationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_StartDepositTreeCreationRequest, Spark_StartDepositTreeCreationResponse>

  func prepare_split_address(
    _ request: Spark_PrepareSplitAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_PrepareSplitAddressRequest, Spark_PrepareSplitAddressResponse>

  func split_node(
    _ request: Spark_SplitNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_SplitNodeRequest, Spark_SplitNodeResponse>

  func finalize_node_signatures(
    _ request: Spark_FinalizeNodeSignaturesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_FinalizeNodeSignaturesRequest, Spark_FinalizeNodeSignaturesResponse>

  func send_transfer(
    _ request: Spark_SendTransferRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_SendTransferRequest, Spark_SendTransferResponse>

  func query_pending_transfers(
    _ request: Spark_QueryPendingTransfersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_QueryPendingTransfersRequest, Spark_QueryPendingTransfersResponse>

  func claim_transfer_tweak_keys(
    _ request: Spark_ClaimTransferTweakKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_ClaimTransferTweakKeysRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func claim_transfer_sign_refunds(
    _ request: Spark_ClaimTransferSignRefundsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_ClaimTransferSignRefundsRequest, Spark_ClaimTransferSignRefundsResponse>

  func aggregate_nodes(
    _ request: Spark_AggregateNodesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Spark_AggregateNodesRequest, Spark_AggregateNodesResponse>
}

extension Spark_SparkServiceClientProtocol {
  public var serviceName: String {
    return "spark.SparkService"
  }

  /// Unary call to generate_deposit_address
  ///
  /// - Parameters:
  ///   - request: Request to send to generate_deposit_address.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generate_deposit_address(
    _ request: Spark_GenerateDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_GenerateDepositAddressRequest, Spark_GenerateDepositAddressResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.generate_deposit_address.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegenerate_deposit_addressInterceptors() ?? []
    )
  }

  /// Unary call to start_deposit_tree_creation
  ///
  /// - Parameters:
  ///   - request: Request to send to start_deposit_tree_creation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func start_deposit_tree_creation(
    _ request: Spark_StartDepositTreeCreationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_StartDepositTreeCreationRequest, Spark_StartDepositTreeCreationResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.start_deposit_tree_creation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makestart_deposit_tree_creationInterceptors() ?? []
    )
  }

  /// Unary call to prepare_split_address
  ///
  /// - Parameters:
  ///   - request: Request to send to prepare_split_address.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func prepare_split_address(
    _ request: Spark_PrepareSplitAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_PrepareSplitAddressRequest, Spark_PrepareSplitAddressResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.prepare_split_address.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeprepare_split_addressInterceptors() ?? []
    )
  }

  /// Unary call to split_node
  ///
  /// - Parameters:
  ///   - request: Request to send to split_node.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func split_node(
    _ request: Spark_SplitNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_SplitNodeRequest, Spark_SplitNodeResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.split_node.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesplit_nodeInterceptors() ?? []
    )
  }

  /// Unary call to finalize_node_signatures
  ///
  /// - Parameters:
  ///   - request: Request to send to finalize_node_signatures.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalize_node_signatures(
    _ request: Spark_FinalizeNodeSignaturesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_FinalizeNodeSignaturesRequest, Spark_FinalizeNodeSignaturesResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.finalize_node_signatures.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefinalize_node_signaturesInterceptors() ?? []
    )
  }

  /// Unary call to send_transfer
  ///
  /// - Parameters:
  ///   - request: Request to send to send_transfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func send_transfer(
    _ request: Spark_SendTransferRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_SendTransferRequest, Spark_SendTransferResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.send_transfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesend_transferInterceptors() ?? []
    )
  }

  /// Unary call to query_pending_transfers
  ///
  /// - Parameters:
  ///   - request: Request to send to query_pending_transfers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func query_pending_transfers(
    _ request: Spark_QueryPendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_QueryPendingTransfersRequest, Spark_QueryPendingTransfersResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.query_pending_transfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makequery_pending_transfersInterceptors() ?? []
    )
  }

  /// Unary call to claim_transfer_tweak_keys
  ///
  /// - Parameters:
  ///   - request: Request to send to claim_transfer_tweak_keys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func claim_transfer_tweak_keys(
    _ request: Spark_ClaimTransferTweakKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_ClaimTransferTweakKeysRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.claim_transfer_tweak_keys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclaim_transfer_tweak_keysInterceptors() ?? []
    )
  }

  /// Unary call to claim_transfer_sign_refunds
  ///
  /// - Parameters:
  ///   - request: Request to send to claim_transfer_sign_refunds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func claim_transfer_sign_refunds(
    _ request: Spark_ClaimTransferSignRefundsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_ClaimTransferSignRefundsRequest, Spark_ClaimTransferSignRefundsResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.claim_transfer_sign_refunds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclaim_transfer_sign_refundsInterceptors() ?? []
    )
  }

  /// Unary call to aggregate_nodes
  ///
  /// - Parameters:
  ///   - request: Request to send to aggregate_nodes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func aggregate_nodes(
    _ request: Spark_AggregateNodesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Spark_AggregateNodesRequest, Spark_AggregateNodesResponse> {
    return self.makeUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.aggregate_nodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaggregate_nodesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Spark_SparkServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Spark_SparkServiceNIOClient")
public final class Spark_SparkServiceClient: Spark_SparkServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the spark.SparkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Spark_SparkServiceNIOClient: Spark_SparkServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the spark.SparkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Spark_SparkServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? { get }

  func makeGenerateDepositAddressCall(
    _ request: Spark_GenerateDepositAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_GenerateDepositAddressRequest, Spark_GenerateDepositAddressResponse>

  func makeStartDepositTreeCreationCall(
    _ request: Spark_StartDepositTreeCreationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_StartDepositTreeCreationRequest, Spark_StartDepositTreeCreationResponse>

  func makePrepareSplitAddressCall(
    _ request: Spark_PrepareSplitAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_PrepareSplitAddressRequest, Spark_PrepareSplitAddressResponse>

  func makeSplitNodeCall(
    _ request: Spark_SplitNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_SplitNodeRequest, Spark_SplitNodeResponse>

  func makeFinalizeNodeSignaturesCall(
    _ request: Spark_FinalizeNodeSignaturesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_FinalizeNodeSignaturesRequest, Spark_FinalizeNodeSignaturesResponse>

  func makeSendTransferCall(
    _ request: Spark_SendTransferRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_SendTransferRequest, Spark_SendTransferResponse>

  func makeQueryPendingTransfersCall(
    _ request: Spark_QueryPendingTransfersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_QueryPendingTransfersRequest, Spark_QueryPendingTransfersResponse>

  func makeClaimTransferTweakKeysCall(
    _ request: Spark_ClaimTransferTweakKeysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_ClaimTransferTweakKeysRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeClaimTransferSignRefundsCall(
    _ request: Spark_ClaimTransferSignRefundsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_ClaimTransferSignRefundsRequest, Spark_ClaimTransferSignRefundsResponse>

  func makeAggregateNodesCall(
    _ request: Spark_AggregateNodesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Spark_AggregateNodesRequest, Spark_AggregateNodesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Spark_SparkServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Spark_SparkServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGenerateDepositAddressCall(
    _ request: Spark_GenerateDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_GenerateDepositAddressRequest, Spark_GenerateDepositAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.generate_deposit_address.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegenerate_deposit_addressInterceptors() ?? []
    )
  }

  public func makeStartDepositTreeCreationCall(
    _ request: Spark_StartDepositTreeCreationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_StartDepositTreeCreationRequest, Spark_StartDepositTreeCreationResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.start_deposit_tree_creation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makestart_deposit_tree_creationInterceptors() ?? []
    )
  }

  public func makePrepareSplitAddressCall(
    _ request: Spark_PrepareSplitAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_PrepareSplitAddressRequest, Spark_PrepareSplitAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.prepare_split_address.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeprepare_split_addressInterceptors() ?? []
    )
  }

  public func makeSplitNodeCall(
    _ request: Spark_SplitNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_SplitNodeRequest, Spark_SplitNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.split_node.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesplit_nodeInterceptors() ?? []
    )
  }

  public func makeFinalizeNodeSignaturesCall(
    _ request: Spark_FinalizeNodeSignaturesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_FinalizeNodeSignaturesRequest, Spark_FinalizeNodeSignaturesResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.finalize_node_signatures.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefinalize_node_signaturesInterceptors() ?? []
    )
  }

  public func makeSendTransferCall(
    _ request: Spark_SendTransferRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_SendTransferRequest, Spark_SendTransferResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.send_transfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesend_transferInterceptors() ?? []
    )
  }

  public func makeQueryPendingTransfersCall(
    _ request: Spark_QueryPendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_QueryPendingTransfersRequest, Spark_QueryPendingTransfersResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.query_pending_transfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makequery_pending_transfersInterceptors() ?? []
    )
  }

  public func makeClaimTransferTweakKeysCall(
    _ request: Spark_ClaimTransferTweakKeysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_ClaimTransferTweakKeysRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.claim_transfer_tweak_keys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclaim_transfer_tweak_keysInterceptors() ?? []
    )
  }

  public func makeClaimTransferSignRefundsCall(
    _ request: Spark_ClaimTransferSignRefundsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_ClaimTransferSignRefundsRequest, Spark_ClaimTransferSignRefundsResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.claim_transfer_sign_refunds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclaim_transfer_sign_refundsInterceptors() ?? []
    )
  }

  public func makeAggregateNodesCall(
    _ request: Spark_AggregateNodesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Spark_AggregateNodesRequest, Spark_AggregateNodesResponse> {
    return self.makeAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.aggregate_nodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaggregate_nodesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Spark_SparkServiceAsyncClientProtocol {
  public func generate_deposit_address(
    _ request: Spark_GenerateDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_GenerateDepositAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.generate_deposit_address.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegenerate_deposit_addressInterceptors() ?? []
    )
  }

  public func start_deposit_tree_creation(
    _ request: Spark_StartDepositTreeCreationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_StartDepositTreeCreationResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.start_deposit_tree_creation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makestart_deposit_tree_creationInterceptors() ?? []
    )
  }

  public func prepare_split_address(
    _ request: Spark_PrepareSplitAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_PrepareSplitAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.prepare_split_address.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeprepare_split_addressInterceptors() ?? []
    )
  }

  public func split_node(
    _ request: Spark_SplitNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_SplitNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.split_node.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesplit_nodeInterceptors() ?? []
    )
  }

  public func finalize_node_signatures(
    _ request: Spark_FinalizeNodeSignaturesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_FinalizeNodeSignaturesResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.finalize_node_signatures.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefinalize_node_signaturesInterceptors() ?? []
    )
  }

  public func send_transfer(
    _ request: Spark_SendTransferRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_SendTransferResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.send_transfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesend_transferInterceptors() ?? []
    )
  }

  public func query_pending_transfers(
    _ request: Spark_QueryPendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_QueryPendingTransfersResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.query_pending_transfers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makequery_pending_transfersInterceptors() ?? []
    )
  }

  public func claim_transfer_tweak_keys(
    _ request: Spark_ClaimTransferTweakKeysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.claim_transfer_tweak_keys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclaim_transfer_tweak_keysInterceptors() ?? []
    )
  }

  public func claim_transfer_sign_refunds(
    _ request: Spark_ClaimTransferSignRefundsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_ClaimTransferSignRefundsResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.claim_transfer_sign_refunds.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeclaim_transfer_sign_refundsInterceptors() ?? []
    )
  }

  public func aggregate_nodes(
    _ request: Spark_AggregateNodesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Spark_AggregateNodesResponse {
    return try await self.performAsyncUnaryCall(
      path: Spark_SparkServiceClientMetadata.Methods.aggregate_nodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaggregate_nodesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Spark_SparkServiceAsyncClient: Spark_SparkServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Spark_SparkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Spark_SparkServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'generate_deposit_address'.
  func makegenerate_deposit_addressInterceptors() -> [ClientInterceptor<Spark_GenerateDepositAddressRequest, Spark_GenerateDepositAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'start_deposit_tree_creation'.
  func makestart_deposit_tree_creationInterceptors() -> [ClientInterceptor<Spark_StartDepositTreeCreationRequest, Spark_StartDepositTreeCreationResponse>]

  /// - Returns: Interceptors to use when invoking 'prepare_split_address'.
  func makeprepare_split_addressInterceptors() -> [ClientInterceptor<Spark_PrepareSplitAddressRequest, Spark_PrepareSplitAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'split_node'.
  func makesplit_nodeInterceptors() -> [ClientInterceptor<Spark_SplitNodeRequest, Spark_SplitNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'finalize_node_signatures'.
  func makefinalize_node_signaturesInterceptors() -> [ClientInterceptor<Spark_FinalizeNodeSignaturesRequest, Spark_FinalizeNodeSignaturesResponse>]

  /// - Returns: Interceptors to use when invoking 'send_transfer'.
  func makesend_transferInterceptors() -> [ClientInterceptor<Spark_SendTransferRequest, Spark_SendTransferResponse>]

  /// - Returns: Interceptors to use when invoking 'query_pending_transfers'.
  func makequery_pending_transfersInterceptors() -> [ClientInterceptor<Spark_QueryPendingTransfersRequest, Spark_QueryPendingTransfersResponse>]

  /// - Returns: Interceptors to use when invoking 'claim_transfer_tweak_keys'.
  func makeclaim_transfer_tweak_keysInterceptors() -> [ClientInterceptor<Spark_ClaimTransferTweakKeysRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'claim_transfer_sign_refunds'.
  func makeclaim_transfer_sign_refundsInterceptors() -> [ClientInterceptor<Spark_ClaimTransferSignRefundsRequest, Spark_ClaimTransferSignRefundsResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregate_nodes'.
  func makeaggregate_nodesInterceptors() -> [ClientInterceptor<Spark_AggregateNodesRequest, Spark_AggregateNodesResponse>]
}

public enum Spark_SparkServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SparkService",
    fullName: "spark.SparkService",
    methods: [
      Spark_SparkServiceClientMetadata.Methods.generate_deposit_address,
      Spark_SparkServiceClientMetadata.Methods.start_deposit_tree_creation,
      Spark_SparkServiceClientMetadata.Methods.prepare_split_address,
      Spark_SparkServiceClientMetadata.Methods.split_node,
      Spark_SparkServiceClientMetadata.Methods.finalize_node_signatures,
      Spark_SparkServiceClientMetadata.Methods.send_transfer,
      Spark_SparkServiceClientMetadata.Methods.query_pending_transfers,
      Spark_SparkServiceClientMetadata.Methods.claim_transfer_tweak_keys,
      Spark_SparkServiceClientMetadata.Methods.claim_transfer_sign_refunds,
      Spark_SparkServiceClientMetadata.Methods.aggregate_nodes,
    ]
  )

  public enum Methods {
    public static let generate_deposit_address = GRPCMethodDescriptor(
      name: "generate_deposit_address",
      path: "/spark.SparkService/generate_deposit_address",
      type: GRPCCallType.unary
    )

    public static let start_deposit_tree_creation = GRPCMethodDescriptor(
      name: "start_deposit_tree_creation",
      path: "/spark.SparkService/start_deposit_tree_creation",
      type: GRPCCallType.unary
    )

    public static let prepare_split_address = GRPCMethodDescriptor(
      name: "prepare_split_address",
      path: "/spark.SparkService/prepare_split_address",
      type: GRPCCallType.unary
    )

    public static let split_node = GRPCMethodDescriptor(
      name: "split_node",
      path: "/spark.SparkService/split_node",
      type: GRPCCallType.unary
    )

    public static let finalize_node_signatures = GRPCMethodDescriptor(
      name: "finalize_node_signatures",
      path: "/spark.SparkService/finalize_node_signatures",
      type: GRPCCallType.unary
    )

    public static let send_transfer = GRPCMethodDescriptor(
      name: "send_transfer",
      path: "/spark.SparkService/send_transfer",
      type: GRPCCallType.unary
    )

    public static let query_pending_transfers = GRPCMethodDescriptor(
      name: "query_pending_transfers",
      path: "/spark.SparkService/query_pending_transfers",
      type: GRPCCallType.unary
    )

    public static let claim_transfer_tweak_keys = GRPCMethodDescriptor(
      name: "claim_transfer_tweak_keys",
      path: "/spark.SparkService/claim_transfer_tweak_keys",
      type: GRPCCallType.unary
    )

    public static let claim_transfer_sign_refunds = GRPCMethodDescriptor(
      name: "claim_transfer_sign_refunds",
      path: "/spark.SparkService/claim_transfer_sign_refunds",
      type: GRPCCallType.unary
    )

    public static let aggregate_nodes = GRPCMethodDescriptor(
      name: "aggregate_nodes",
      path: "/spark.SparkService/aggregate_nodes",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Spark_SparkServiceProvider: CallHandlerProvider {
  var interceptors: Spark_SparkServiceServerInterceptorFactoryProtocol? { get }

  func generate_deposit_address(request: Spark_GenerateDepositAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_GenerateDepositAddressResponse>

  func start_deposit_tree_creation(request: Spark_StartDepositTreeCreationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_StartDepositTreeCreationResponse>

  func prepare_split_address(request: Spark_PrepareSplitAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_PrepareSplitAddressResponse>

  func split_node(request: Spark_SplitNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_SplitNodeResponse>

  func finalize_node_signatures(request: Spark_FinalizeNodeSignaturesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_FinalizeNodeSignaturesResponse>

  func send_transfer(request: Spark_SendTransferRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_SendTransferResponse>

  func query_pending_transfers(request: Spark_QueryPendingTransfersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_QueryPendingTransfersResponse>

  func claim_transfer_tweak_keys(request: Spark_ClaimTransferTweakKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func claim_transfer_sign_refunds(request: Spark_ClaimTransferSignRefundsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_ClaimTransferSignRefundsResponse>

  func aggregate_nodes(request: Spark_AggregateNodesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Spark_AggregateNodesResponse>
}

extension Spark_SparkServiceProvider {
  public var serviceName: Substring {
    return Spark_SparkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "generate_deposit_address":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_GenerateDepositAddressRequest>(),
        responseSerializer: ProtobufSerializer<Spark_GenerateDepositAddressResponse>(),
        interceptors: self.interceptors?.makegenerate_deposit_addressInterceptors() ?? [],
        userFunction: self.generate_deposit_address(request:context:)
      )

    case "start_deposit_tree_creation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_StartDepositTreeCreationRequest>(),
        responseSerializer: ProtobufSerializer<Spark_StartDepositTreeCreationResponse>(),
        interceptors: self.interceptors?.makestart_deposit_tree_creationInterceptors() ?? [],
        userFunction: self.start_deposit_tree_creation(request:context:)
      )

    case "prepare_split_address":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_PrepareSplitAddressRequest>(),
        responseSerializer: ProtobufSerializer<Spark_PrepareSplitAddressResponse>(),
        interceptors: self.interceptors?.makeprepare_split_addressInterceptors() ?? [],
        userFunction: self.prepare_split_address(request:context:)
      )

    case "split_node":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_SplitNodeRequest>(),
        responseSerializer: ProtobufSerializer<Spark_SplitNodeResponse>(),
        interceptors: self.interceptors?.makesplit_nodeInterceptors() ?? [],
        userFunction: self.split_node(request:context:)
      )

    case "finalize_node_signatures":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_FinalizeNodeSignaturesRequest>(),
        responseSerializer: ProtobufSerializer<Spark_FinalizeNodeSignaturesResponse>(),
        interceptors: self.interceptors?.makefinalize_node_signaturesInterceptors() ?? [],
        userFunction: self.finalize_node_signatures(request:context:)
      )

    case "send_transfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_SendTransferRequest>(),
        responseSerializer: ProtobufSerializer<Spark_SendTransferResponse>(),
        interceptors: self.interceptors?.makesend_transferInterceptors() ?? [],
        userFunction: self.send_transfer(request:context:)
      )

    case "query_pending_transfers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_QueryPendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Spark_QueryPendingTransfersResponse>(),
        interceptors: self.interceptors?.makequery_pending_transfersInterceptors() ?? [],
        userFunction: self.query_pending_transfers(request:context:)
      )

    case "claim_transfer_tweak_keys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_ClaimTransferTweakKeysRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeclaim_transfer_tweak_keysInterceptors() ?? [],
        userFunction: self.claim_transfer_tweak_keys(request:context:)
      )

    case "claim_transfer_sign_refunds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_ClaimTransferSignRefundsRequest>(),
        responseSerializer: ProtobufSerializer<Spark_ClaimTransferSignRefundsResponse>(),
        interceptors: self.interceptors?.makeclaim_transfer_sign_refundsInterceptors() ?? [],
        userFunction: self.claim_transfer_sign_refunds(request:context:)
      )

    case "aggregate_nodes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_AggregateNodesRequest>(),
        responseSerializer: ProtobufSerializer<Spark_AggregateNodesResponse>(),
        interceptors: self.interceptors?.makeaggregate_nodesInterceptors() ?? [],
        userFunction: self.aggregate_nodes(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Spark_SparkServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Spark_SparkServiceServerInterceptorFactoryProtocol? { get }

  func generate_deposit_address(
    request: Spark_GenerateDepositAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_GenerateDepositAddressResponse

  func start_deposit_tree_creation(
    request: Spark_StartDepositTreeCreationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_StartDepositTreeCreationResponse

  func prepare_split_address(
    request: Spark_PrepareSplitAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_PrepareSplitAddressResponse

  func split_node(
    request: Spark_SplitNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_SplitNodeResponse

  func finalize_node_signatures(
    request: Spark_FinalizeNodeSignaturesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_FinalizeNodeSignaturesResponse

  func send_transfer(
    request: Spark_SendTransferRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_SendTransferResponse

  func query_pending_transfers(
    request: Spark_QueryPendingTransfersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_QueryPendingTransfersResponse

  func claim_transfer_tweak_keys(
    request: Spark_ClaimTransferTweakKeysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func claim_transfer_sign_refunds(
    request: Spark_ClaimTransferSignRefundsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_ClaimTransferSignRefundsResponse

  func aggregate_nodes(
    request: Spark_AggregateNodesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Spark_AggregateNodesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Spark_SparkServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Spark_SparkServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Spark_SparkServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Spark_SparkServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "generate_deposit_address":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_GenerateDepositAddressRequest>(),
        responseSerializer: ProtobufSerializer<Spark_GenerateDepositAddressResponse>(),
        interceptors: self.interceptors?.makegenerate_deposit_addressInterceptors() ?? [],
        wrapping: { try await self.generate_deposit_address(request: $0, context: $1) }
      )

    case "start_deposit_tree_creation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_StartDepositTreeCreationRequest>(),
        responseSerializer: ProtobufSerializer<Spark_StartDepositTreeCreationResponse>(),
        interceptors: self.interceptors?.makestart_deposit_tree_creationInterceptors() ?? [],
        wrapping: { try await self.start_deposit_tree_creation(request: $0, context: $1) }
      )

    case "prepare_split_address":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_PrepareSplitAddressRequest>(),
        responseSerializer: ProtobufSerializer<Spark_PrepareSplitAddressResponse>(),
        interceptors: self.interceptors?.makeprepare_split_addressInterceptors() ?? [],
        wrapping: { try await self.prepare_split_address(request: $0, context: $1) }
      )

    case "split_node":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_SplitNodeRequest>(),
        responseSerializer: ProtobufSerializer<Spark_SplitNodeResponse>(),
        interceptors: self.interceptors?.makesplit_nodeInterceptors() ?? [],
        wrapping: { try await self.split_node(request: $0, context: $1) }
      )

    case "finalize_node_signatures":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_FinalizeNodeSignaturesRequest>(),
        responseSerializer: ProtobufSerializer<Spark_FinalizeNodeSignaturesResponse>(),
        interceptors: self.interceptors?.makefinalize_node_signaturesInterceptors() ?? [],
        wrapping: { try await self.finalize_node_signatures(request: $0, context: $1) }
      )

    case "send_transfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_SendTransferRequest>(),
        responseSerializer: ProtobufSerializer<Spark_SendTransferResponse>(),
        interceptors: self.interceptors?.makesend_transferInterceptors() ?? [],
        wrapping: { try await self.send_transfer(request: $0, context: $1) }
      )

    case "query_pending_transfers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_QueryPendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Spark_QueryPendingTransfersResponse>(),
        interceptors: self.interceptors?.makequery_pending_transfersInterceptors() ?? [],
        wrapping: { try await self.query_pending_transfers(request: $0, context: $1) }
      )

    case "claim_transfer_tweak_keys":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_ClaimTransferTweakKeysRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeclaim_transfer_tweak_keysInterceptors() ?? [],
        wrapping: { try await self.claim_transfer_tweak_keys(request: $0, context: $1) }
      )

    case "claim_transfer_sign_refunds":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_ClaimTransferSignRefundsRequest>(),
        responseSerializer: ProtobufSerializer<Spark_ClaimTransferSignRefundsResponse>(),
        interceptors: self.interceptors?.makeclaim_transfer_sign_refundsInterceptors() ?? [],
        wrapping: { try await self.claim_transfer_sign_refunds(request: $0, context: $1) }
      )

    case "aggregate_nodes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Spark_AggregateNodesRequest>(),
        responseSerializer: ProtobufSerializer<Spark_AggregateNodesResponse>(),
        interceptors: self.interceptors?.makeaggregate_nodesInterceptors() ?? [],
        wrapping: { try await self.aggregate_nodes(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Spark_SparkServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'generate_deposit_address'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegenerate_deposit_addressInterceptors() -> [ServerInterceptor<Spark_GenerateDepositAddressRequest, Spark_GenerateDepositAddressResponse>]

  /// - Returns: Interceptors to use when handling 'start_deposit_tree_creation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makestart_deposit_tree_creationInterceptors() -> [ServerInterceptor<Spark_StartDepositTreeCreationRequest, Spark_StartDepositTreeCreationResponse>]

  /// - Returns: Interceptors to use when handling 'prepare_split_address'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeprepare_split_addressInterceptors() -> [ServerInterceptor<Spark_PrepareSplitAddressRequest, Spark_PrepareSplitAddressResponse>]

  /// - Returns: Interceptors to use when handling 'split_node'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesplit_nodeInterceptors() -> [ServerInterceptor<Spark_SplitNodeRequest, Spark_SplitNodeResponse>]

  /// - Returns: Interceptors to use when handling 'finalize_node_signatures'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makefinalize_node_signaturesInterceptors() -> [ServerInterceptor<Spark_FinalizeNodeSignaturesRequest, Spark_FinalizeNodeSignaturesResponse>]

  /// - Returns: Interceptors to use when handling 'send_transfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makesend_transferInterceptors() -> [ServerInterceptor<Spark_SendTransferRequest, Spark_SendTransferResponse>]

  /// - Returns: Interceptors to use when handling 'query_pending_transfers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makequery_pending_transfersInterceptors() -> [ServerInterceptor<Spark_QueryPendingTransfersRequest, Spark_QueryPendingTransfersResponse>]

  /// - Returns: Interceptors to use when handling 'claim_transfer_tweak_keys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeclaim_transfer_tweak_keysInterceptors() -> [ServerInterceptor<Spark_ClaimTransferTweakKeysRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'claim_transfer_sign_refunds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeclaim_transfer_sign_refundsInterceptors() -> [ServerInterceptor<Spark_ClaimTransferSignRefundsRequest, Spark_ClaimTransferSignRefundsResponse>]

  /// - Returns: Interceptors to use when handling 'aggregate_nodes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeaggregate_nodesInterceptors() -> [ServerInterceptor<Spark_AggregateNodesRequest, Spark_AggregateNodesResponse>]
}

public enum Spark_SparkServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SparkService",
    fullName: "spark.SparkService",
    methods: [
      Spark_SparkServiceServerMetadata.Methods.generate_deposit_address,
      Spark_SparkServiceServerMetadata.Methods.start_deposit_tree_creation,
      Spark_SparkServiceServerMetadata.Methods.prepare_split_address,
      Spark_SparkServiceServerMetadata.Methods.split_node,
      Spark_SparkServiceServerMetadata.Methods.finalize_node_signatures,
      Spark_SparkServiceServerMetadata.Methods.send_transfer,
      Spark_SparkServiceServerMetadata.Methods.query_pending_transfers,
      Spark_SparkServiceServerMetadata.Methods.claim_transfer_tweak_keys,
      Spark_SparkServiceServerMetadata.Methods.claim_transfer_sign_refunds,
      Spark_SparkServiceServerMetadata.Methods.aggregate_nodes,
    ]
  )

  public enum Methods {
    public static let generate_deposit_address = GRPCMethodDescriptor(
      name: "generate_deposit_address",
      path: "/spark.SparkService/generate_deposit_address",
      type: GRPCCallType.unary
    )

    public static let start_deposit_tree_creation = GRPCMethodDescriptor(
      name: "start_deposit_tree_creation",
      path: "/spark.SparkService/start_deposit_tree_creation",
      type: GRPCCallType.unary
    )

    public static let prepare_split_address = GRPCMethodDescriptor(
      name: "prepare_split_address",
      path: "/spark.SparkService/prepare_split_address",
      type: GRPCCallType.unary
    )

    public static let split_node = GRPCMethodDescriptor(
      name: "split_node",
      path: "/spark.SparkService/split_node",
      type: GRPCCallType.unary
    )

    public static let finalize_node_signatures = GRPCMethodDescriptor(
      name: "finalize_node_signatures",
      path: "/spark.SparkService/finalize_node_signatures",
      type: GRPCCallType.unary
    )

    public static let send_transfer = GRPCMethodDescriptor(
      name: "send_transfer",
      path: "/spark.SparkService/send_transfer",
      type: GRPCCallType.unary
    )

    public static let query_pending_transfers = GRPCMethodDescriptor(
      name: "query_pending_transfers",
      path: "/spark.SparkService/query_pending_transfers",
      type: GRPCCallType.unary
    )

    public static let claim_transfer_tweak_keys = GRPCMethodDescriptor(
      name: "claim_transfer_tweak_keys",
      path: "/spark.SparkService/claim_transfer_tweak_keys",
      type: GRPCCallType.unary
    )

    public static let claim_transfer_sign_refunds = GRPCMethodDescriptor(
      name: "claim_transfer_sign_refunds",
      path: "/spark.SparkService/claim_transfer_sign_refunds",
      type: GRPCCallType.unary
    )

    public static let aggregate_nodes = GRPCMethodDescriptor(
      name: "aggregate_nodes",
      path: "/spark.SparkService/aggregate_nodes",
      type: GRPCCallType.unary
    )
  }
}
