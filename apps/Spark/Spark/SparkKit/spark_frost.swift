// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(spark_frostFFI)
    import spark_frostFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_spark_frost_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_spark_frost_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public struct DummyTx {
    public var tx: Data
    public var txid: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tx: Data, txid: String) {
        self.tx = tx
        self.txid = txid
    }
}

extension DummyTx: Equatable, Hashable {
    public static func == (lhs: DummyTx, rhs: DummyTx) -> Bool {
        if lhs.tx != rhs.tx {
            return false
        }
        if lhs.txid != rhs.txid {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tx)
        hasher.combine(txid)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDummyTx: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DummyTx {
        return
            try DummyTx(
                tx: FfiConverterData.read(from: &buf),
                txid: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: DummyTx, into buf: inout [UInt8]) {
        FfiConverterData.write(value.tx, into: &buf)
        FfiConverterString.write(value.txid, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDummyTx_lift(_ buf: RustBuffer) throws -> DummyTx {
    return try FfiConverterTypeDummyTx.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDummyTx_lower(_ value: DummyTx) -> RustBuffer {
    return FfiConverterTypeDummyTx.lower(value)
}

public struct KeyPackage {
    public var secretKey: Data
    public var publicKey: Data
    public var verifyingKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(secretKey: Data, publicKey: Data, verifyingKey: Data) {
        self.secretKey = secretKey
        self.publicKey = publicKey
        self.verifyingKey = verifyingKey
    }
}

extension KeyPackage: Equatable, Hashable {
    public static func == (lhs: KeyPackage, rhs: KeyPackage) -> Bool {
        if lhs.secretKey != rhs.secretKey {
            return false
        }
        if lhs.publicKey != rhs.publicKey {
            return false
        }
        if lhs.verifyingKey != rhs.verifyingKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(secretKey)
        hasher.combine(publicKey)
        hasher.combine(verifyingKey)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeKeyPackage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeyPackage {
        return
            try KeyPackage(
                secretKey: FfiConverterData.read(from: &buf),
                publicKey: FfiConverterData.read(from: &buf),
                verifyingKey: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: KeyPackage, into buf: inout [UInt8]) {
        FfiConverterData.write(value.secretKey, into: &buf)
        FfiConverterData.write(value.publicKey, into: &buf)
        FfiConverterData.write(value.verifyingKey, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyPackage_lift(_ buf: RustBuffer) throws -> KeyPackage {
    return try FfiConverterTypeKeyPackage.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeKeyPackage_lower(_ value: KeyPackage) -> RustBuffer {
    return FfiConverterTypeKeyPackage.lower(value)
}

public struct NonceResult {
    public var nonce: SigningNonce
    public var commitment: SigningCommitment

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(nonce: SigningNonce, commitment: SigningCommitment) {
        self.nonce = nonce
        self.commitment = commitment
    }
}

extension NonceResult: Equatable, Hashable {
    public static func == (lhs: NonceResult, rhs: NonceResult) -> Bool {
        if lhs.nonce != rhs.nonce {
            return false
        }
        if lhs.commitment != rhs.commitment {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(nonce)
        hasher.combine(commitment)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeNonceResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NonceResult {
        return
            try NonceResult(
                nonce: FfiConverterTypeSigningNonce.read(from: &buf),
                commitment: FfiConverterTypeSigningCommitment.read(from: &buf)
            )
    }

    public static func write(_ value: NonceResult, into buf: inout [UInt8]) {
        FfiConverterTypeSigningNonce.write(value.nonce, into: &buf)
        FfiConverterTypeSigningCommitment.write(value.commitment, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNonceResult_lift(_ buf: RustBuffer) throws -> NonceResult {
    return try FfiConverterTypeNonceResult.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeNonceResult_lower(_ value: NonceResult) -> RustBuffer {
    return FfiConverterTypeNonceResult.lower(value)
}

public struct SigningCommitment {
    public var hiding: Data
    public var binding: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hiding: Data, binding: Data) {
        self.hiding = hiding
        self.binding = binding
    }
}

extension SigningCommitment: Equatable, Hashable {
    public static func == (lhs: SigningCommitment, rhs: SigningCommitment) -> Bool {
        if lhs.hiding != rhs.hiding {
            return false
        }
        if lhs.binding != rhs.binding {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hiding)
        hasher.combine(binding)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSigningCommitment: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningCommitment {
        return
            try SigningCommitment(
                hiding: FfiConverterData.read(from: &buf),
                binding: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: SigningCommitment, into buf: inout [UInt8]) {
        FfiConverterData.write(value.hiding, into: &buf)
        FfiConverterData.write(value.binding, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningCommitment_lift(_ buf: RustBuffer) throws -> SigningCommitment {
    return try FfiConverterTypeSigningCommitment.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningCommitment_lower(_ value: SigningCommitment) -> RustBuffer {
    return FfiConverterTypeSigningCommitment.lower(value)
}

public struct SigningNonce {
    public var hiding: Data
    public var binding: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hiding: Data, binding: Data) {
        self.hiding = hiding
        self.binding = binding
    }
}

extension SigningNonce: Equatable, Hashable {
    public static func == (lhs: SigningNonce, rhs: SigningNonce) -> Bool {
        if lhs.hiding != rhs.hiding {
            return false
        }
        if lhs.binding != rhs.binding {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hiding)
        hasher.combine(binding)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSigningNonce: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningNonce {
        return
            try SigningNonce(
                hiding: FfiConverterData.read(from: &buf),
                binding: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: SigningNonce, into buf: inout [UInt8]) {
        FfiConverterData.write(value.hiding, into: &buf)
        FfiConverterData.write(value.binding, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningNonce_lift(_ buf: RustBuffer) throws -> SigningNonce {
    return try FfiConverterTypeSigningNonce.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningNonce_lower(_ value: SigningNonce) -> RustBuffer {
    return FfiConverterTypeSigningNonce.lower(value)
}

public struct TransactionResult {
    public var tx: Data
    public var sighash: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tx: Data, sighash: Data) {
        self.tx = tx
        self.sighash = sighash
    }
}

extension TransactionResult: Equatable, Hashable {
    public static func == (lhs: TransactionResult, rhs: TransactionResult) -> Bool {
        if lhs.tx != rhs.tx {
            return false
        }
        if lhs.sighash != rhs.sighash {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tx)
        hasher.combine(sighash)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransactionResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransactionResult {
        return
            try TransactionResult(
                tx: FfiConverterData.read(from: &buf),
                sighash: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: TransactionResult, into buf: inout [UInt8]) {
        FfiConverterData.write(value.tx, into: &buf)
        FfiConverterData.write(value.sighash, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionResult_lift(_ buf: RustBuffer) throws -> TransactionResult {
    return try FfiConverterTypeTransactionResult.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTransactionResult_lower(_ value: TransactionResult) -> RustBuffer {
    return FfiConverterTypeTransactionResult.lower(value)
}

public enum Error {
    case Spark(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeError: FfiConverterRustBuffer {
    typealias SwiftType = Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Spark(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Error, into buf: inout [UInt8]) {
        switch value {
        case .Spark(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        }
    }
}

extension Error: Equatable, Hashable {}

extension Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringData: FfiConverterRustBuffer {
    public static func write(_ value: [String: Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterData.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Data] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Data]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterData.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDictionaryStringTypeSigningCommitment: FfiConverterRustBuffer {
    public static func write(_ value: [String: SigningCommitment], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeSigningCommitment.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: SigningCommitment] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: SigningCommitment]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeSigningCommitment.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

public func aggregateFrost(msg: Data, statechainCommitments: [String: SigningCommitment], selfCommitment: SigningCommitment, statechainSignatures: [String: Data], selfSignature: Data, statechainPublicKeys: [String: Data], selfPublicKey: Data, verifyingKey: Data) throws -> Data {
    return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_aggregate_frost(
            FfiConverterData.lower(msg),
            FfiConverterDictionaryStringTypeSigningCommitment.lower(statechainCommitments),
            FfiConverterTypeSigningCommitment.lower(selfCommitment),
            FfiConverterDictionaryStringData.lower(statechainSignatures),
            FfiConverterData.lower(selfSignature),
            FfiConverterDictionaryStringData.lower(statechainPublicKeys),
            FfiConverterData.lower(selfPublicKey),
            FfiConverterData.lower(verifyingKey), $0
        )
    })
}

public func constructNodeTx(tx: Data, vout: UInt32, address: String, locktime: UInt16) throws -> TransactionResult {
    return try FfiConverterTypeTransactionResult.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_construct_node_tx(
            FfiConverterData.lower(tx),
            FfiConverterUInt32.lower(vout),
            FfiConverterString.lower(address),
            FfiConverterUInt16.lower(locktime), $0
        )
    })
}

public func constructRefundTx(tx: Data, vout: UInt32, pubkey: Data, network: String, locktime: UInt16) throws -> TransactionResult {
    return try FfiConverterTypeTransactionResult.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_construct_refund_tx(
            FfiConverterData.lower(tx),
            FfiConverterUInt32.lower(vout),
            FfiConverterData.lower(pubkey),
            FfiConverterString.lower(network),
            FfiConverterUInt16.lower(locktime), $0
        )
    })
}

public func constructSplitTx(tx: Data, vout: UInt32, addresses: [String], locktime: UInt16) throws -> TransactionResult {
    return try FfiConverterTypeTransactionResult.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_construct_split_tx(
            FfiConverterData.lower(tx),
            FfiConverterUInt32.lower(vout),
            FfiConverterSequenceString.lower(addresses),
            FfiConverterUInt16.lower(locktime), $0
        )
    })
}

public func createDummyTx(address: String, amountSats: UInt64) throws -> DummyTx {
    return try FfiConverterTypeDummyTx.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_create_dummy_tx(
            FfiConverterString.lower(address),
            FfiConverterUInt64.lower(amountSats), $0
        )
    })
}

public func decryptEcies(encryptedMsg: Data, privateKey: Data) throws -> Data {
    return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_decrypt_ecies(
            FfiConverterData.lower(encryptedMsg),
            FfiConverterData.lower(privateKey), $0
        )
    })
}

public func encryptEcies(msg: Data, publicKey: Data) throws -> Data {
    return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_encrypt_ecies(
            FfiConverterData.lower(msg),
            FfiConverterData.lower(publicKey), $0
        )
    })
}

public func frostNonce(keyPackage: KeyPackage) throws -> NonceResult {
    return try FfiConverterTypeNonceResult.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_frost_nonce(
            FfiConverterTypeKeyPackage.lower(keyPackage), $0
        )
    })
}

public func signFrost(msg: Data, keyPackage: KeyPackage, nonce: SigningNonce, selfCommitment: SigningCommitment, statechainCommitments: [String: SigningCommitment]) throws -> Data {
    return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeError.lift) {
        uniffi_spark_frost_fn_func_sign_frost(
            FfiConverterData.lower(msg),
            FfiConverterTypeKeyPackage.lower(keyPackage),
            FfiConverterTypeSigningNonce.lower(nonce),
            FfiConverterTypeSigningCommitment.lower(selfCommitment),
            FfiConverterDictionaryStringTypeSigningCommitment.lower(statechainCommitments), $0
        )
    })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_spark_frost_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_spark_frost_checksum_func_aggregate_frost() != 35576 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_construct_node_tx() != 50549 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_construct_refund_tx() != 47425 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_construct_split_tx() != 55511 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_create_dummy_tx() != 14929 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_decrypt_ecies() != 30948 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_encrypt_ecies() != 55565 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_frost_nonce() != 5111 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_spark_frost_checksum_func_sign_frost() != 15484 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
